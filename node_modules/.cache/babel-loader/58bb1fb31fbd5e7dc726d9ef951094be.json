{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/mixins/overlayable/index.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/mixins/overlayable/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n// Components\nimport VOverlay from \"../../components/VOverlay\"; // Utilities\n\nimport { keyCodes, addOnceEventListener, addPassiveEventListener, getZIndex } from \"../../util/helpers\"; // Types\n\nimport Vue from 'vue';\n/* @vue/component */\n\nexport default Vue.extend().extend({\n  name: 'overlayable',\n  props: {\n    hideOverlay: Boolean\n  },\n  data: function data() {\n    return {\n      overlay: null\n    };\n  },\n  watch: {\n    hideOverlay: function hideOverlay(value) {\n      if (value) this.removeOverlay();else this.genOverlay();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeOverlay();\n  },\n  methods: {\n    createOverlay: function createOverlay() {\n      var overlay = new VOverlay({\n        propsData: {\n          absolute: this.absolute,\n          value: false\n        }\n      });\n      overlay.$mount();\n      var parent = this.absolute ? this.$el.parentNode : document.querySelector('[data-app]');\n      parent && parent.insertBefore(overlay.$el, parent.firstChild);\n      this.overlay = overlay;\n    },\n    genOverlay: function genOverlay() {\n      var _this = this;\n\n      this.hideScroll();\n      if (this.hideOverlay) return;\n      if (!this.overlay) this.createOverlay();\n      requestAnimationFrame(function () {\n        if (!_this.overlay) return;\n\n        if (_this.activeZIndex !== undefined) {\n          _this.overlay.zIndex = String(_this.activeZIndex - 1);\n        } else if (_this.$el) {\n          _this.overlay.zIndex = getZIndex(_this.$el);\n        }\n\n        _this.overlay.value = true;\n      });\n      return true;\n    },\n\n    /** removeOverlay(false) will not restore the scollbar afterwards */\n    removeOverlay: function removeOverlay() {\n      var _this2 = this;\n\n      var showScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.overlay) {\n        addOnceEventListener(this.overlay.$el, 'transitionend', function () {\n          if (!_this2.overlay || !_this2.overlay.$el || !_this2.overlay.$el.parentNode || _this2.overlay.value) return;\n\n          _this2.overlay.$el.parentNode.removeChild(_this2.overlay.$el);\n\n          _this2.overlay.$destroy();\n\n          _this2.overlay = null;\n        });\n        this.overlay.value = false;\n      }\n\n      showScroll && this.showScroll();\n    },\n    scrollListener: function scrollListener(e) {\n      if (e.type === 'keydown') {\n        if (['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName) || // https://github.com/vuetifyjs/vuetify/issues/4715\n        e.target.isContentEditable) return;\n        var up = [keyCodes.up, keyCodes.pageup];\n        var down = [keyCodes.down, keyCodes.pagedown];\n\n        if (up.includes(e.keyCode)) {\n          e.deltaY = -1;\n        } else if (down.includes(e.keyCode)) {\n          e.deltaY = 1;\n        } else {\n          return;\n        }\n      }\n\n      if (e.target === this.overlay || e.type !== 'keydown' && e.target === document.body || this.checkPath(e)) e.preventDefault();\n    },\n    hasScrollbar: function hasScrollbar(el) {\n      if (!el || el.nodeType !== Node.ELEMENT_NODE) return false;\n      var style = window.getComputedStyle(el);\n      return ['auto', 'scroll'].includes(style.overflowY) && el.scrollHeight > el.clientHeight;\n    },\n    shouldScroll: function shouldScroll(el, delta) {\n      if (el.scrollTop === 0 && delta < 0) return true;\n      return el.scrollTop + el.clientHeight === el.scrollHeight && delta > 0;\n    },\n    isInside: function isInside(el, parent) {\n      if (el === parent) {\n        return true;\n      } else if (el === null || el === document.body) {\n        return false;\n      } else {\n        return this.isInside(el.parentNode, parent);\n      }\n    },\n    checkPath: function checkPath(e) {\n      var path = e.path || this.composedPath(e);\n      var delta = e.deltaY;\n\n      if (e.type === 'keydown' && path[0] === document.body) {\n        var dialog = this.$refs.dialog; // getSelection returns null in firefox in some edge cases, can be ignored\n\n        var selected = window.getSelection().anchorNode;\n\n        if (dialog && this.hasScrollbar(dialog) && this.isInside(selected, dialog)) {\n          return this.shouldScroll(dialog, delta);\n        }\n\n        return true;\n      }\n\n      for (var index = 0; index < path.length; index++) {\n        var el = path[index];\n        if (el === document) return true;\n        if (el === document.documentElement) return true;\n        if (el === this.$refs.content) return true;\n        if (this.hasScrollbar(el)) return this.shouldScroll(el, delta);\n      }\n\n      return true;\n    },\n\n    /**\n     * Polyfill for Event.prototype.composedPath\n     */\n    composedPath: function composedPath(e) {\n      if (e.composedPath) return e.composedPath();\n      var path = [];\n      var el = e.target;\n\n      while (el) {\n        path.push(el);\n\n        if (el.tagName === 'HTML') {\n          path.push(document);\n          path.push(window);\n          return path;\n        }\n\n        el = el.parentElement;\n      }\n\n      return path;\n    },\n    hideScroll: function hideScroll() {\n      if (this.$vuetify.breakpoint.smAndDown) {\n        document.documentElement.classList.add('overflow-y-hidden');\n      } else {\n        addPassiveEventListener(window, 'wheel', this.scrollListener, {\n          passive: false\n        });\n        window.addEventListener('keydown', this.scrollListener);\n      }\n    },\n    showScroll: function showScroll() {\n      document.documentElement.classList.remove('overflow-y-hidden');\n      window.removeEventListener('wheel', this.scrollListener);\n      window.removeEventListener('keydown', this.scrollListener);\n    }\n  }\n});",null]}