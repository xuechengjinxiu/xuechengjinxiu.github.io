{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VTextField/VTextField.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VTextField/VTextField.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _defineProperty from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Styles\nimport \"../../../src/components/VTextField/VTextField.sass\"; // Extensions\n\nimport VInput from \"../VInput\"; // Components\n\nimport VCounter from \"../VCounter\";\nimport VLabel from \"../VLabel\"; // Mixins\n\nimport Loadable from \"../../mixins/loadable\"; // Directives\n\nimport ripple from \"../../directives/ripple\"; // Utilities\n\nimport { convertToUnit, keyCodes } from \"../../util/helpers\";\nimport { breaking, consoleWarn } from \"../../util/console\"; // Types\n\nimport mixins from \"../../util/mixins\";\nvar baseMixins = mixins(VInput, Loadable);\nvar dirtyTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-text-field',\n  directives: {\n    ripple: ripple\n  },\n  inheritAttrs: false,\n  props: {\n    appendOuterIcon: String,\n    autofocus: Boolean,\n    clearable: Boolean,\n    clearIcon: {\n      type: String,\n      default: '$vuetify.icons.clear'\n    },\n    counter: [Boolean, Number, String],\n    filled: Boolean,\n    flat: Boolean,\n    fullWidth: Boolean,\n    label: String,\n    outlined: Boolean,\n    placeholder: String,\n    prefix: String,\n    prependInnerIcon: String,\n    reverse: Boolean,\n    rounded: Boolean,\n    shaped: Boolean,\n    singleLine: Boolean,\n    solo: Boolean,\n    soloInverted: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text'\n    }\n  },\n  data: function data() {\n    return {\n      badInput: false,\n      labelWidth: 0,\n      prefixWidth: 0,\n      prependWidth: 0,\n      initialValue: null,\n      isBooted: false,\n      isClearing: false\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread({}, VInput.options.computed.classes.call(this), {\n        'v-text-field': true,\n        'v-text-field--full-width': this.fullWidth,\n        'v-text-field--prefix': this.prefix,\n        'v-text-field--single-line': this.isSingle,\n        'v-text-field--solo': this.isSolo,\n        'v-text-field--solo-inverted': this.soloInverted,\n        'v-text-field--solo-flat': this.flat,\n        'v-text-field--filled': this.filled,\n        'v-text-field--is-booted': this.isBooted,\n        'v-text-field--enclosed': this.isEnclosed,\n        'v-text-field--reverse': this.reverse,\n        'v-text-field--outlined': this.outlined,\n        'v-text-field--placeholder': this.placeholder,\n        'v-text-field--rounded': this.rounded,\n        'v-text-field--shaped': this.shaped\n      });\n    },\n    counterValue: function counterValue() {\n      return (this.internalValue || '').toString().length;\n    },\n    internalValue: {\n      get: function get() {\n        return this.lazyValue;\n      },\n      set: function set(val) {\n        this.lazyValue = val;\n        this.$emit('input', this.lazyValue);\n      }\n    },\n    isDirty: function isDirty() {\n      return this.lazyValue != null && this.lazyValue.toString().length > 0 || this.badInput;\n    },\n    isEnclosed: function isEnclosed() {\n      return this.filled || this.isSolo || this.outlined || this.fullWidth;\n    },\n    isLabelActive: function isLabelActive() {\n      return this.isDirty || dirtyTypes.includes(this.type);\n    },\n    isSingle: function isSingle() {\n      return this.isSolo || this.singleLine || this.fullWidth;\n    },\n    isSolo: function isSolo() {\n      return this.solo || this.soloInverted;\n    },\n    labelPosition: function labelPosition() {\n      var offset = this.prefix && !this.labelValue ? this.prefixWidth : 0;\n      if (this.labelValue && this.prependWidth) offset -= this.prependWidth;\n      return this.$vuetify.rtl === this.reverse ? {\n        left: offset,\n        right: 'auto'\n      } : {\n        left: 'auto',\n        right: offset\n      };\n    },\n    showLabel: function showLabel() {\n      return this.hasLabel && (!this.isSingle || !this.isLabelActive && !this.placeholder);\n    },\n    labelValue: function labelValue() {\n      return !this.isSingle && Boolean(this.isFocused || this.isLabelActive || this.placeholder);\n    }\n  },\n  watch: {\n    labelValue: 'setLabelWidth',\n    outlined: 'setLabelWidth',\n    label: function label() {\n      this.$nextTick(this.setLabelWidth);\n    },\n    prefix: function prefix() {\n      this.$nextTick(this.setPrefixWidth);\n    },\n    isFocused: function isFocused(val) {\n      // Sets validationState from validatable\n      this.hasColor = val;\n\n      if (val) {\n        this.initialValue = this.lazyValue;\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue);\n      }\n    },\n    value: function value(val) {\n      this.lazyValue = val;\n    }\n  },\n  created: function created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('box')) {\n      breaking('box', 'filled', this);\n    }\n    /* istanbul ignore next */\n\n\n    if (this.$attrs.hasOwnProperty('browser-autocomplete')) {\n      breaking('browser-autocomplete', 'autocomplete', this);\n    }\n    /* istanbul ignore if */\n\n\n    if (this.shaped && !(this.filled || this.outlined || this.isSolo)) {\n      consoleWarn('shaped should be used with either filled or outlined', this);\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.autofocus && this.onFocus();\n    this.setLabelWidth();\n    this.setPrefixWidth();\n    this.setPrependWidth();\n    requestAnimationFrame(function () {\n      return _this.isBooted = true;\n    });\n  },\n  methods: {\n    /** @public */\n    focus: function focus() {\n      this.onFocus();\n    },\n\n    /** @public */\n    blur: function blur(e) {\n      var _this2 = this;\n\n      // https://github.com/vuetifyjs/vuetify/issues/5913\n      // Safari tab order gets broken if called synchronous\n      window.requestAnimationFrame(function () {\n        _this2.$refs.input && _this2.$refs.input.blur();\n      });\n    },\n    clearableCallback: function clearableCallback() {\n      var _this3 = this;\n\n      this.internalValue = null;\n      this.$nextTick(function () {\n        return _this3.$refs.input && _this3.$refs.input.focus();\n      });\n    },\n    genAppendSlot: function genAppendSlot() {\n      var slot = [];\n\n      if (this.$slots['append-outer']) {\n        slot.push(this.$slots['append-outer']);\n      } else if (this.appendOuterIcon) {\n        slot.push(this.genIcon('appendOuter'));\n      }\n\n      return this.genSlot('append', 'outer', slot);\n    },\n    genPrependInnerSlot: function genPrependInnerSlot() {\n      var slot = [];\n\n      if (this.$slots['prepend-inner']) {\n        slot.push(this.$slots['prepend-inner']);\n      } else if (this.prependInnerIcon) {\n        slot.push(this.genIcon('prependInner'));\n      }\n\n      return this.genSlot('prepend', 'inner', slot);\n    },\n    genIconSlot: function genIconSlot() {\n      var slot = [];\n\n      if (this.$slots['append']) {\n        slot.push(this.$slots['append']);\n      } else if (this.appendIcon) {\n        slot.push(this.genIcon('append'));\n      }\n\n      return this.genSlot('append', 'inner', slot);\n    },\n    genInputSlot: function genInputSlot() {\n      var input = VInput.options.methods.genInputSlot.call(this);\n      var prepend = this.genPrependInnerSlot();\n\n      if (prepend) {\n        input.children = input.children || [];\n        input.children.unshift(prepend);\n      }\n\n      return input;\n    },\n    genClearIcon: function genClearIcon() {\n      if (!this.clearable) return null;\n      var icon = this.isDirty ? 'clear' : '';\n      return this.genSlot('append', 'inner', [this.genIcon(icon, this.clearableCallback)]);\n    },\n    genCounter: function genCounter() {\n      if (this.counter === false || this.counter == null) return null;\n      var max = this.counter === true ? this.$attrs.maxlength : this.counter;\n      return this.$createElement(VCounter, {\n        props: {\n          dark: this.dark,\n          light: this.light,\n          max: max,\n          value: this.counterValue\n        }\n      });\n    },\n    genDefaultSlot: function genDefaultSlot() {\n      return [this.genFieldset(), this.genTextFieldSlot(), this.genClearIcon(), this.genIconSlot(), this.genProgress()];\n    },\n    genFieldset: function genFieldset() {\n      if (!this.outlined) return null;\n      return this.$createElement('fieldset', {\n        attrs: {\n          'aria-hidden': true\n        }\n      }, [this.genLegend()]);\n    },\n    genLabel: function genLabel() {\n      if (!this.showLabel) return null;\n      var data = {\n        props: {\n          absolute: true,\n          color: this.validationState,\n          dark: this.dark,\n          disabled: this.disabled,\n          focused: !this.isSingle && (this.isFocused || !!this.validationState),\n          for: this.computedId,\n          left: this.labelPosition.left,\n          light: this.light,\n          right: this.labelPosition.right,\n          value: this.labelValue\n        }\n      };\n      return this.$createElement(VLabel, data, this.$slots.label || this.label);\n    },\n    genLegend: function genLegend() {\n      var width = !this.singleLine && (this.labelValue || this.isDirty) ? this.labelWidth : 0;\n      var span = this.$createElement('span', {\n        domProps: {\n          innerHTML: '&#8203;'\n        }\n      });\n      return this.$createElement('legend', {\n        style: {\n          width: !this.isSingle ? convertToUnit(width) : undefined\n        }\n      }, [span]);\n    },\n    genInput: function genInput() {\n      var listeners = Object.assign({}, this.$listeners);\n      delete listeners['change']; // Change should not be bound externally\n\n      return this.$createElement('input', {\n        style: {},\n        domProps: {\n          value: this.lazyValue\n        },\n        attrs: _objectSpread({}, this.$attrs, {\n          autofocus: this.autofocus,\n          disabled: this.disabled,\n          id: this.computedId,\n          placeholder: this.placeholder,\n          readonly: this.readonly,\n          type: this.type\n        }),\n        on: Object.assign(listeners, {\n          blur: this.onBlur,\n          input: this.onInput,\n          focus: this.onFocus,\n          keydown: this.onKeyDown\n        }),\n        ref: 'input'\n      });\n    },\n    genMessages: function genMessages() {\n      if (this.hideDetails) return null;\n      return this.$createElement('div', {\n        staticClass: 'v-text-field__details'\n      }, [VInput.options.methods.genMessages.call(this), this.genCounter()]);\n    },\n    genTextFieldSlot: function genTextFieldSlot() {\n      return this.$createElement('div', {\n        staticClass: 'v-text-field__slot'\n      }, [this.genLabel(), this.prefix ? this.genAffix('prefix') : null, this.genInput(), this.suffix ? this.genAffix('suffix') : null]);\n    },\n    genAffix: function genAffix(type) {\n      return this.$createElement('div', {\n        class: \"v-text-field__\".concat(type),\n        ref: type\n      }, this[type]);\n    },\n    onBlur: function onBlur(e) {\n      this.isFocused = false;\n      e && this.$emit('blur', e);\n    },\n    onClick: function onClick() {\n      if (this.isFocused || this.disabled || !this.$refs.input) return;\n      this.$refs.input.focus();\n    },\n    onFocus: function onFocus(e) {\n      if (!this.$refs.input) return;\n\n      if (document.activeElement !== this.$refs.input) {\n        return this.$refs.input.focus();\n      }\n\n      if (!this.isFocused) {\n        this.isFocused = true;\n        e && this.$emit('focus', e);\n      }\n    },\n    onInput: function onInput(e) {\n      var target = e.target;\n      this.internalValue = target.value;\n      this.badInput = target.validity && target.validity.badInput;\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.keyCode === keyCodes.enter) this.$emit('change', this.internalValue);\n      this.$emit('keydown', e);\n    },\n    onMouseDown: function onMouseDown(e) {\n      // Prevent input from being blurred\n      if (e.target !== this.$refs.input) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      VInput.options.methods.onMouseDown.call(this, e);\n    },\n    onMouseUp: function onMouseUp(e) {\n      if (this.hasMouseDown) this.focus();\n      VInput.options.methods.onMouseUp.call(this, e);\n    },\n    setLabelWidth: function setLabelWidth() {\n      if (!this.outlined || !this.$refs.label) return;\n      this.labelWidth = this.$refs.label.offsetWidth * 0.75 + 6;\n    },\n    setPrefixWidth: function setPrefixWidth() {\n      if (!this.$refs.prefix) return;\n      this.prefixWidth = this.$refs.prefix.offsetWidth;\n    },\n    setPrependWidth: function setPrependWidth() {\n      if (!this.outlined || !this.$refs['prepend-inner']) return;\n      this.prependWidth = this.$refs['prepend-inner'].offsetWidth;\n    }\n  }\n});",null]}