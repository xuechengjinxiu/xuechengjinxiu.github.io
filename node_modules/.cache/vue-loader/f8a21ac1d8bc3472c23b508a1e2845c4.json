{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/views/Sends/SendForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/views/Sends/SendForm.vue","mtime":1585119550000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport transaction from \"@/libs1/transaction\";\nimport crypto from \"@/libs1/crypto\";\nimport { mapState, mapGetters } from \"vuex\";\n\nexport default {\n  data() {\n    return {\n      fee: 0.1,\n      amount: \"\",\n      valid: false,\n      sendConfirm: false,\n      sendInfo: {},\n      recipient: \"\",\n      Description: \"\",\n      networkType: this.$config.NET_BYTE,\n      activeTab: 0, //hot or cold\n      vsysBalance: 0,\n      hotAddrKeyPair: {},\n      sendPromp: \"\",\n      rules: {\n        maxLength: f => {\n          return v => {\n            if (v && v.length) {\n              return (\n                v.length < f || `Description shouldn't be longer than ${f}.`\n              );\n            } else {\n              return true;\n            }\n          };\n        },\n        required: f => {\n          return v => !!v || `${f} is required`;\n        },\n        validAddr: netByte => {\n          return v => {\n            let reg = /[1-9a-km-zA-HJ-NP-Z]/;\n            if (v) {\n              for (let i of v) {\n                if (!reg.test(i)) return \"Invalid address\";\n              }\n            }\n            return (\n              (crypto.isValidAddress(v, netByte) &&\n                this.wallets[this.currentIndex].address != v) ||\n              \"Invalid address\"\n            );\n          };\n        },\n        validPublicKey: (addr, netByte) => {\n          return v =>\n            crypto.isValidPublicKey(v, addr, netByte) || \"Invalid publicKey\";\n        },\n        maxAmount: f => {\n          return v => Number(v) <= Number(f) || \"Insufficient Balance\";\n        },\n        validAmount: () => {\n          return v => {\n            if (v && Number(v)) {\n              let a = this.$utils\n                .Big(v)\n                .times(this.unity)\n                .toFixed();\n              if (a) {\n                if (a.indexOf(\".\") !== -1) return \"Too many decimal\";\n                if (a.length > 20) return \"No longer than 20 bits\";\n              }\n            }\n            return /^([1-9]\\d*|0)(\\.\\d{0,20})?$/.test(v) || `${v} is not valid`;\n          };\n        }\n      }\n    };\n  },\n  created() {\n    this.getVSYS();\n    this.fee =\n      window.constants.TOKEN_ID === \"VSYS Coin\"\n        ? window.constants.TX_FEE.Default\n        : window.constants.TX_FEE.ContractExec;\n    this.precision = this.unity;\n    this.recipient = this.$store.state.sendInfo.recipient;\n    this.amount = this.$store.state.sendInfo.amount;\n    this.Description = this.$store.state.sendInfo.description;\n  },\n\n  computed: {\n    ...mapState([\"wallets\", \"currentIndex\", \"unity\"]),\n    ...mapGetters([\"balance\"])\n  },\n\n  methods: {\n    goConfirm() {\n      if (!this.$refs.form.validate()) return;\n      // Info of Send Confirm Dialog\n      this.sendInfo = {\n        From: this.wallets[this.currentIndex].address,\n        To: this.recipient,\n        Type: \"Payment\",\n        Amount: this.amount,\n        Fee: this.fee,\n        Description: this.Description\n      };\n      this.sendConfirm = true;\n    },\n    getVSYS() {\n      this.$store.dispatch(\"update_vsys\", this.currentIndex);\n    },\n    handleCancel() {\n      if (this.$store.state.loginType === \"send\") {\n        this.$router.replace({ path: \"/home/shift\" });\n      } else {\n        this.$store.commit(\"reset_sendinfo\");\n        this.$router.replace({ path: \"/home\" });\n      }\n    },\n    routerBtn() {\n      if (!this.$refs.form.validate()) return;\n      if (this.$store.state.tokenid === \"VSYS Coin\") {\n        // const dataInfo = {\n        //   recipient: this.recipient,\n        //   amount: parseInt(this.amount * this.precision),\n        //   fee: parseInt(this.fee * constants.VSYS_PRECISION),\n        //   feeScale: constants.FEE_SCALE,\n        //   timestamp: Date.now(),\n        //   attachment: this.Description\n        // };\n        // this.doPayment = apiSchema => {\n        //   axios\n        //     .post(`http://18.218.106.1:9922/vsys/broadcast/payment`, apiSchema)\n        //     .then(dealRes)\n        //     .catch(dealErr);\n        // };\n        // if (this.activeTab === 0) {//hot wallet\n        //   let apiSchema = transaction.prepareForAPI(\n        //     dataInfo,\n        //     this.hotAddrKeyPair['AUAztxsft2v6rmjRRb72nLea6BNyRHHWpUR'],\n        //     constants.TRANSACTION_TYPE.PAYMENT_TX\n        //   );\n        //   this.doPayment(apiSchema);\n        // } else {\n        //   this.txType = constants.TRANSACTION_TYPE.PAYMENT_TX;\n        //   this.toSign = dataInfo;\n        // }\n      } else {\n        let contractId = transaction.tokenIdToContractId(this.$config.tokenId);\n        console.log(contractId);\n        const dataInfo = {\n          contractId: contractId,\n          functionIndex: this.$store.state.canSplit ? 4 : 3,\n          functionData: transaction.prepareTokenSendFuncDataStr(\n            this.recipient,\n            parseInt(this.amount * this.precision)\n          ),\n          attachment: this.Description || \"\",\n          fee: parseInt(this.fee * window.constants.VSYS_PRECISION),\n          feeScale: window.constants.FEE_SCALE,\n          timestamp: Date.now() * 1e6\n        };\n        //hot wallet\n        if (this.activeTab === 0) {\n          let apiSchema = transaction.prepareForAPI(\n            dataInfo,\n            this.wallets[this.currentIndex].keyPair,\n            window.constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX\n          );\n          //update send info in store\n          this.$store.commit(\"update_sendInfo\", {\n            recipient: this.recipient,\n            amount: this.amount,\n            description: this.Description || \"\"\n          });\n          //transaction broadcast\n          this.$axios\n            .post(\n              `${this.$config.vsysEndPoint}/contract/broadcast/execute`,\n              apiSchema\n            )\n            .then(res => {\n              if (res.status === 200) {\n                this.$store.commit(\"update_loginType\", \"\");\n                this.$router.replace({\n                  path: \"/home/send/finish\"\n                });\n              }\n            })\n            .catch(err => {\n              if (err.response && err.response.status === 400) {\n                console.log(err.response);\n                if (err.response.data.error === 112) {\n                  this.sendPromp = \"Not enough VSYS.\";\n                }\n              } else {\n                this.sendPromp = \"Sorry,Transaction form submission failed\";\n              }\n            });\n        } else {\n          //cold wallet\n          this.txType = window.constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX;\n          this.toSign = dataInfo;\n        }\n      }\n    }\n  }\n};\n",null]}