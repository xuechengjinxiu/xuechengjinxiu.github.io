{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VRating/VRating.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VRating/VRating.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VRating/VRating.sass\"; // Components\n\nimport VIcon from '../VIcon'; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport Delayable from '../../mixins/delayable';\nimport Sizeable from '../../mixins/sizeable';\nimport Rippleable from '../../mixins/rippleable';\nimport Themeable from '../../mixins/themeable'; // Utilities\n\nimport { createRange } from '../../util/helpers';\nimport mixins from '../../util/mixins';\n/* @vue/component */\n\nexport default mixins(Colorable, Delayable, Rippleable, Sizeable, Themeable).extend({\n  name: 'v-rating',\n  props: {\n    backgroundColor: {\n      type: String,\n      default: 'accent'\n    },\n    color: {\n      type: String,\n      default: 'primary'\n    },\n    clearable: Boolean,\n    dense: Boolean,\n    emptyIcon: {\n      type: String,\n      default: '$vuetify.icons.ratingEmpty'\n    },\n    fullIcon: {\n      type: String,\n      default: '$vuetify.icons.ratingFull'\n    },\n    halfIcon: {\n      type: String,\n      default: '$vuetify.icons.ratingHalf'\n    },\n    halfIncrements: Boolean,\n    hover: Boolean,\n    length: {\n      type: [Number, String],\n      default: 5\n    },\n    readonly: Boolean,\n    size: [Number, String],\n    value: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data() {\n    return {\n      hoverIndex: -1,\n      internalValue: this.value\n    };\n  },\n\n  computed: {\n    directives() {\n      if (this.readonly || !this.ripple) return [];\n      return [{\n        name: 'ripple',\n        value: {\n          circle: true\n        }\n      }];\n    },\n\n    iconProps() {\n      const {\n        dark,\n        medium,\n        large,\n        light,\n        small,\n        size,\n        xLarge\n      } = this.$props;\n      return {\n        dark,\n        medium,\n        large,\n        light,\n        size,\n        small,\n        xLarge\n      };\n    },\n\n    isHovering() {\n      return this.hover && this.hoverIndex >= 0;\n    }\n\n  },\n  watch: {\n    internalValue(val) {\n      val !== this.value && this.$emit('input', val);\n    },\n\n    value(val) {\n      this.internalValue = val;\n    }\n\n  },\n  methods: {\n    createClickFn(i) {\n      return e => {\n        if (this.readonly) return;\n        const newValue = this.genHoverIndex(e, i);\n\n        if (this.clearable && this.internalValue === newValue) {\n          this.internalValue = 0;\n        } else {\n          this.internalValue = newValue;\n        }\n      };\n    },\n\n    createProps(i) {\n      const props = {\n        index: i,\n        value: this.internalValue,\n        click: this.createClickFn(i),\n        isFilled: Math.floor(this.internalValue) > i,\n        isHovered: Math.floor(this.hoverIndex) > i\n      };\n\n      if (this.halfIncrements) {\n        props.isHalfHovered = !props.isHovered && (this.hoverIndex - i) % 1 > 0;\n        props.isHalfFilled = !props.isFilled && (this.internalValue - i) % 1 > 0;\n      }\n\n      return props;\n    },\n\n    genHoverIndex(e, i) {\n      let isHalf = this.isHalfEvent(e);\n      if (this.$vuetify.rtl) isHalf = !isHalf;\n      return i + (isHalf ? 0.5 : 1);\n    },\n\n    getIconName(props) {\n      const isFull = this.isHovering ? props.isHovered : props.isFilled;\n      const isHalf = this.isHovering ? props.isHalfHovered : props.isHalfFilled;\n      return isFull ? this.fullIcon : isHalf ? this.halfIcon : this.emptyIcon;\n    },\n\n    getColor(props) {\n      if (this.isHovering) {\n        if (props.isHovered || props.isHalfHovered) return this.color;\n      } else {\n        if (props.isFilled || props.isHalfFilled) return this.color;\n      }\n\n      return this.backgroundColor;\n    },\n\n    isHalfEvent(e) {\n      if (this.halfIncrements) {\n        const rect = e.target && e.target.getBoundingClientRect();\n        if (rect && e.pageX - rect.left < rect.width / 2) return true;\n      }\n\n      return false;\n    },\n\n    onMouseEnter(e, i) {\n      this.runDelay('open', () => {\n        this.hoverIndex = this.genHoverIndex(e, i);\n      });\n    },\n\n    onMouseLeave() {\n      this.runDelay('close', () => this.hoverIndex = -1);\n    },\n\n    genItem(i) {\n      const props = this.createProps(i);\n      if (this.$scopedSlots.item) return this.$scopedSlots.item(props);\n      const listeners = {\n        click: props.click\n      };\n\n      if (this.hover) {\n        listeners.mouseenter = e => this.onMouseEnter(e, i);\n\n        listeners.mouseleave = this.onMouseLeave;\n\n        if (this.halfIncrements) {\n          listeners.mousemove = e => this.onMouseEnter(e, i);\n        }\n      }\n\n      return this.$createElement(VIcon, this.setTextColor(this.getColor(props), {\n        directives: this.directives,\n        props: this.iconProps,\n        on: listeners\n      }), [this.getIconName(props)]);\n    }\n\n  },\n\n  render(h) {\n    const children = createRange(Number(this.length)).map(i => this.genItem(i));\n    return h('div', {\n      staticClass: 'v-rating',\n      class: {\n        'v-rating--readonly': this.readonly,\n        'v-rating--dense': this.dense\n      }\n    }, children);\n  }\n\n});",null]}