{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-events.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-events.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.max-safe-integer\";\nimport _defineProperty from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Styles\nimport \"../../../../src/components/VCalendar/mixins/calendar-with-events.sass\"; // Directives\n\nimport ripple from \"../../../directives/ripple\"; // Mixins\n\nimport CalendarBase from \"./calendar-base\"; // Util\n\nimport props from \"../util/props\";\nimport { getDayIdentifier, parseTime } from \"../util/timestamp\";\nimport { parseEvent, isEventOn } from \"../util/events\";\n/* @vue/component */\n\nexport default CalendarBase.extend({\n  name: 'calendar-with-events',\n  directives: {\n    ripple: ripple\n  },\n  props: props.events,\n  computed: {\n    noEvents: function noEvents() {\n      return this.events.length === 0;\n    },\n    parsedEvents: function parsedEvents() {\n      var _this = this;\n\n      return this.events.map(function (input, index) {\n        return parseEvent(input, index, _this.eventStart, _this.eventEnd);\n      });\n    },\n    eventColorFunction: function eventColorFunction() {\n      var _this2 = this;\n\n      return typeof this.eventColor === 'function' ? this.eventColor : function () {\n        return _this2.eventColor;\n      };\n    },\n    eventTextColorFunction: function eventTextColorFunction() {\n      var _this3 = this;\n\n      return typeof this.eventTextColor === 'function' ? this.eventTextColor : function () {\n        return _this3.eventTextColor;\n      };\n    },\n    eventNameFunction: function eventNameFunction() {\n      var _this4 = this;\n\n      return typeof this.eventName === 'function' ? this.eventName : function (event, timedEvent) {\n        var name = event.input[_this4.eventName];\n\n        if (event.start.hasTime) {\n          if (timedEvent) {\n            var showStart = event.start.hour < 12 && event.end.hour >= 12;\n\n            var start = _this4.formatTime(event.start, showStart);\n\n            var end = _this4.formatTime(event.end, true);\n\n            return \"<strong>\".concat(name, \"</strong><br>\").concat(start, \" - \").concat(end);\n          } else {\n            var time = _this4.formatTime(event.start, true);\n\n            return \"<strong>\".concat(time, \"</strong> \").concat(name);\n          }\n        }\n\n        return name;\n      };\n    }\n  },\n  methods: {\n    formatTime: function formatTime(withTime, ampm) {\n      var suffix = ampm ? withTime.hour < 12 ? 'a' : 'p' : '';\n      var hour = withTime.hour % 12 || 12;\n      var minute = withTime.minute;\n      return minute > 0 ? minute < 10 ? \"\".concat(hour, \":0\").concat(minute).concat(suffix) : \"\".concat(hour, \":\").concat(minute).concat(suffix) : \"\".concat(hour).concat(suffix);\n    },\n    updateEventVisibility: function updateEventVisibility() {\n      if (this.noEvents || !this.eventMore) {\n        return;\n      }\n\n      var eventHeight = this.eventHeight;\n      var eventsMap = this.getEventsMap();\n\n      for (var date in eventsMap) {\n        var _eventsMap$date = eventsMap[date],\n            parent = _eventsMap$date.parent,\n            events = _eventsMap$date.events,\n            more = _eventsMap$date.more;\n\n        if (!more) {\n          break;\n        }\n\n        var parentBounds = parent.getBoundingClientRect();\n        var last = events.length - 1;\n        var hide = false;\n        var hidden = 0;\n\n        for (var i = 0; i <= last; i++) {\n          if (!hide) {\n            var eventBounds = events[i].getBoundingClientRect();\n            hide = eventBounds.bottom + eventHeight > parentBounds.bottom && i !== last;\n          }\n\n          if (hide) {\n            var id = events[i].getAttribute('data-event');\n            this.hideEvents(id);\n            hidden++;\n          }\n        }\n\n        if (hide) {\n          more.style.display = '';\n          more.innerHTML = this.$vuetify.lang.t(this.eventMoreText, hidden);\n        } else {\n          more.style.display = 'none';\n        }\n      }\n    },\n    hideEvents: function hideEvents(id) {\n      var elements = this.$refs.events;\n      elements.forEach(function (el) {\n        if (el.getAttribute('data-event') === id) {\n          el.style.display = 'none';\n        }\n      });\n    },\n    getEventsMap: function getEventsMap() {\n      var eventsMap = {};\n      var elements = this.$refs.events;\n\n      if (!elements || !elements.forEach) {\n        return eventsMap;\n      }\n\n      elements.forEach(function (el) {\n        var date = el.getAttribute('data-date');\n\n        if (el.parentElement && date) {\n          if (!(date in eventsMap)) {\n            eventsMap[date] = {\n              parent: el.parentElement,\n              more: null,\n              events: []\n            };\n          }\n\n          if (el.getAttribute('data-more')) {\n            eventsMap[date].more = el;\n          } else {\n            eventsMap[date].events.push(el);\n            el.style.display = '';\n          }\n        }\n      });\n      return eventsMap;\n    },\n    genDayEvent: function genDayEvent(_ref, index, day) {\n      var offset = _ref.offset,\n          event = _ref.event;\n      var eventHeight = this.eventHeight;\n      var eventMarginBottom = this.eventMarginBottom;\n      var relativeOffset = (offset - index) * (eventHeight + eventMarginBottom); // 1 = margin bottom\n\n      var dayIdentifier = getDayIdentifier(day);\n      var start = dayIdentifier === event.startIdentifier;\n      var end = dayIdentifier === event.endIdentifier;\n      var scope = {\n        event: event.input,\n        day: day,\n        outside: day.outside,\n        start: start,\n        end: end,\n        timed: false\n      };\n      return this.genEvent(event, scope, start || day.index === 0, false, {\n        staticClass: 'v-event',\n        class: {\n          'v-event-start': start,\n          'v-event-end': end\n        },\n        style: {\n          height: \"\".concat(eventHeight, \"px\"),\n          top: \"\".concat(relativeOffset, \"px\"),\n          'margin-bottom': \"\".concat(eventMarginBottom, \"px\")\n        },\n        attrs: {\n          'data-date': day.date,\n          'data-event': event.index\n        },\n        key: event.index,\n        ref: 'events',\n        refInFor: true\n      });\n    },\n    genTimedEvent: function genTimedEvent(_ref2, index, day) {\n      var offset = _ref2.offset,\n          event = _ref2.event,\n          columnCount = _ref2.columnCount,\n          column = _ref2.column;\n      var dayIdentifier = getDayIdentifier(day);\n      var start = event.startIdentifier >= dayIdentifier;\n      var end = event.endIdentifier > dayIdentifier;\n      var top = start ? day.timeToY(event.start) : 0;\n      var bottom = end ? day.timeToY(1440) : day.timeToY(event.end);\n      var height = Math.max(this.eventHeight, bottom - top);\n      var left = columnCount === -1 ? offset * 5 : column * 100 / columnCount;\n      var right = columnCount === -1 ? 0 : Math.max(0, (columnCount - column - 2) * 100 / columnCount + 10);\n      var scope = {\n        event: event.input,\n        day: day,\n        outside: day.outside,\n        start: start,\n        end: end,\n        timed: true\n      };\n      return this.genEvent(event, scope, true, true, {\n        staticClass: 'v-event-timed',\n        style: {\n          top: \"\".concat(top, \"px\"),\n          height: \"\".concat(height, \"px\"),\n          left: \"\".concat(left, \"%\"),\n          right: \"\".concat(right, \"%\")\n        }\n      });\n    },\n    genEvent: function genEvent(event, scope, showName, timedEvent, data) {\n      var slot = this.$scopedSlots.event;\n      var text = this.eventTextColorFunction(event.input);\n      var background = this.eventColorFunction(event.input);\n      return this.$createElement('div', this.setTextColor(text, this.setBackgroundColor(background, _objectSpread({\n        on: this.getDefaultMouseEventHandlers(':event', function (nativeEvent) {\n          return _objectSpread({}, scope, {\n            nativeEvent: nativeEvent\n          });\n        }),\n        directives: [{\n          name: 'ripple',\n          value: this.eventRipple != null ? this.eventRipple : true\n        }]\n      }, data))), slot ? slot(scope) : showName ? [this.genName(event, timedEvent)] : undefined);\n    },\n    genName: function genName(event, timedEvent) {\n      return this.$createElement('div', {\n        staticClass: 'pl-1',\n        domProps: {\n          innerHTML: this.eventNameFunction(event, timedEvent)\n        }\n      });\n    },\n    genMore: function genMore(day) {\n      var _this5 = this;\n\n      return this.$createElement('div', {\n        staticClass: 'v-event-more pl-1',\n        attrs: {\n          'data-date': day.date,\n          'data-more': 1\n        },\n        directives: [{\n          name: 'ripple',\n          value: this.eventRipple != null ? this.eventRipple : true\n        }],\n        on: {\n          click: function click() {\n            return _this5.$emit('click:more', day);\n          }\n        },\n        style: {\n          display: 'none'\n        },\n        ref: 'events',\n        refInFor: true\n      });\n    },\n    getEventsForDay: function getEventsForDay(day) {\n      var identifier = getDayIdentifier(day);\n      return this.parsedEvents.filter(function (event) {\n        return isEventOn(event, identifier);\n      });\n    },\n    getEventsForDayAll: function getEventsForDayAll(day) {\n      var identifier = getDayIdentifier(day);\n      return this.parsedEvents.filter(function (event) {\n        return event.allDay && isEventOn(event, identifier);\n      });\n    },\n    getEventsForDayTimed: function getEventsForDayTimed(day) {\n      var identifier = getDayIdentifier(day);\n      return this.parsedEvents.filter(function (event) {\n        return !event.allDay && isEventOn(event, identifier);\n      });\n    },\n    isSameColumn: function isSameColumn(a, b) {\n      var astart = parseTime(a.event.start);\n      var bstart = parseTime(b.event.start);\n      var diff = astart - bstart;\n      var abs = diff < 0 ? -diff : diff;\n      return abs < this.eventOverlapThreshold;\n    },\n    isOverlapping: function isOverlapping(a, b) {\n      var astart = parseTime(a.event.start);\n      var bstart = parseTime(b.event.start);\n\n      if (a.offset < b.offset && bstart < astart) {\n        var aend = astart + this.eventOverlapThreshold;\n        var bend = parseTime(b.event.end);\n        return !(astart >= bend || aend <= bstart);\n      }\n\n      return false;\n    },\n    getScopedSlots: function getScopedSlots() {\n      var _this6 = this;\n\n      if (this.noEvents) {\n        return this.$scopedSlots;\n      }\n      /**\n       * Over the span of a week (for example) we want to maintain an event in the same row (for weekly and monthly views).\n       * We keep track of those rows by indexToOffset. If the value in that array is -1, then we can place an event at that spot.\n       * For a daily view with timed events we arrange them based on columns and offsets. If two or more events start at around the\n       * same time (eventOverlapThreshold) they go into columns. If one event starts inside another it is indented the appropriate amount.\n       * If one event overlaps another after those adjustments are made those events are placed in columns together instead of any defined\n       * indents.\n       */\n\n\n      var parsedEvents = this.parsedEvents;\n      var indexToOffset = parsedEvents.map(function (event) {\n        return -1;\n      });\n      var resetOnWeekday = this.weekdays[0];\n\n      var checkReset = function checkReset(day) {\n        if (day.weekday === resetOnWeekday) {\n          for (var i = 0; i < indexToOffset.length; i++) {\n            indexToOffset[i] = -1;\n          }\n        }\n      };\n\n      var getOffset = function getOffset(visual, visuals) {\n        var offset = indexToOffset[visual.event.index];\n\n        if (offset === -1) {\n          var min = Number.MAX_SAFE_INTEGER;\n          var max = -1;\n          visuals.forEach(function (other) {\n            var otherOffset = indexToOffset[other.event.index];\n\n            if (otherOffset !== -1) {\n              min = Math.min(min, otherOffset);\n              max = Math.max(max, otherOffset);\n            }\n          });\n          offset = min > 0 && max !== -1 ? min - 1 : max + 1;\n          indexToOffset[visual.event.index] = offset;\n        }\n\n        return offset;\n      };\n\n      var getVisuals = function getVisuals(events, timed) {\n        var visuals = events.map(function (event) {\n          return {\n            event: event,\n            offset: 0,\n            columnCount: -1,\n            column: -1\n          };\n        }); // sort events by start date/time\n\n        visuals.sort(function (a, b) {\n          return a.event.startTimestampIdentifier - b.event.startTimestampIdentifier;\n        });\n\n        if (timed) {\n          // timed events can be organized into columns\n          visuals.forEach(function (visual) {\n            if (visual.columnCount !== -1) {\n              return;\n            }\n\n            var columns = [];\n            visuals.forEach(function (other) {\n              if (other.columnCount === -1 && _this6.isSameColumn(visual, other)) {\n                columns.push(other);\n              }\n            });\n\n            if (columns.length > 1) {\n              columns.forEach(function (visual, visualIndex) {\n                visual.column = visualIndex;\n                visual.columnCount = columns.length;\n              });\n            }\n          }); // for any not organized into columns, if they overlap another event\n          // not in a column they are offset\n\n          visuals.forEach(function (visual) {\n            if (visual.columnCount === -1) {\n              visuals.forEach(function (other) {\n                var otherOffset = indexToOffset[other.event.index];\n\n                if (otherOffset !== -1 && other.event.endTimestampIdentifier <= visual.event.startTimestampIdentifier) {\n                  indexToOffset[other.event.index] = -1;\n                }\n              });\n              visual.offset = getOffset(visual, visuals);\n            }\n          }); // for any not organized into columns, if a previous event overlaps this event\n          // join them into the columns\n\n          visuals.forEach(function (visual) {\n            if (visual.columnCount === -1) {\n              var columns = [visual];\n              visuals.forEach(function (other) {\n                if (other !== visual && other.columnCount === -1 && _this6.isOverlapping(visual, other)) {\n                  columns.push(other);\n                }\n              });\n\n              if (columns.length > 1) {\n                columns.forEach(function (visual, visualIndex) {\n                  visual.column = visualIndex;\n                  visual.columnCount = columns.length;\n                });\n              }\n            }\n          });\n        } else {\n          visuals.forEach(function (visual) {\n            visual.offset = getOffset(visual, visuals);\n          });\n        }\n\n        visuals.sort(function (a, b) {\n          return a.offset - b.offset || a.column - b.column;\n        });\n        return visuals;\n      };\n\n      var getSlotChildren = function getSlotChildren(day, getter, mapper, timed) {\n        checkReset(day);\n        var events = getter(day);\n        return events.length === 0 ? undefined : getVisuals(events, timed).map(function (visual, index) {\n          return mapper(visual, index, day);\n        });\n      };\n\n      return _objectSpread({}, this.$scopedSlots, {\n        day: function day(_day) {\n          var children = getSlotChildren(_day, _this6.getEventsForDay, _this6.genDayEvent, false);\n\n          if (children && children.length > 0 && _this6.eventMore) {\n            children.push(_this6.genMore(_day));\n          }\n\n          return children;\n        },\n        'day-header': function dayHeader(day) {\n          return getSlotChildren(day, _this6.getEventsForDayAll, _this6.genDayEvent, false);\n        },\n        'day-body': function dayBody(day) {\n          return [_this6.$createElement('div', {\n            staticClass: 'v-event-timed-container'\n          }, getSlotChildren(day, _this6.getEventsForDayTimed, _this6.genTimedEvent, true))];\n        }\n      });\n    }\n  }\n});",null]}