{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js??ref--13-0!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/converters.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/converters.js","mtime":1585119550000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.typed.uint32-array\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\n/** START OF THE LICENSED CODE */\n\n/******************************************************************************\n * Copyright Â© 2013-2016 The Nxt Core Developers.                             *\n *                                                                            *\n * See the AUTHORS.txt, DEVELOPER-AGREEMENT.txt and LICENSE.txt files at      *\n * the top-level directory of this distribution for the individual copyright  *\n * holder information and the developer policies on copyright and licensing.  *\n *                                                                            *\n * Unless otherwise agreed in a custom licensing agreement, no part of the    *\n * Nxt software, including this file, may be copied, modified, propagated,    *\n * or distributed except according to the terms contained in the LICENSE.txt  *\n * file.                                                                      *\n *                                                                            *\n * Removal or modification of this copyright notice is prohibited.            *\n *                                                                            *\n ******************************************************************************/\nimport CryptoJS from \"crypto-js\";\nvar charToNibble = {};\nvar nibbleToChar = [];\nvar i;\n\nfor (i = 0; i <= 9; ++i) {\n  var character = i.toString();\n  charToNibble[character] = i;\n  nibbleToChar.push(character);\n}\n\nfor (i = 10; i <= 15; ++i) {\n  var lowerChar = String.fromCharCode(\"a\".charCodeAt(0) + i - 10);\n  var upperChar = String.fromCharCode(\"A\".charCodeAt(0) + i - 10);\n  charToNibble[lowerChar] = i;\n  charToNibble[upperChar] = i;\n  nibbleToChar.push(lowerChar);\n}\n\nvar Converters = {\n  byteArrayToHexString: function byteArrayToHexString(bytes) {\n    var str = \"\";\n\n    for (var i_1 = 0; i_1 < bytes.length; ++i_1) {\n      if (bytes[i_1] < 0) {\n        bytes[i_1] += 256;\n      }\n\n      str += nibbleToChar[bytes[i_1] >> 4] + nibbleToChar[bytes[i_1] & 0x0f];\n    }\n\n    return str;\n  },\n  stringToByteArray: function stringToByteArray(str) {\n    str = unescape(encodeURIComponent(str));\n    var bytes = new Array(str.length);\n\n    for (var i_2 = 0; i_2 < str.length; ++i_2) {\n      bytes[i_2] = str.charCodeAt(i_2);\n    }\n\n    return bytes;\n  },\n  hexStringToByteArray: function hexStringToByteArray(str) {\n    var bytes = [];\n    var i = 0;\n\n    if (0 !== str.length % 2) {\n      bytes.push(charToNibble[str.charAt(0)]);\n      ++i;\n    }\n\n    for (; i < str.length - 1; i += 2) {\n      bytes.push((charToNibble[str.charAt(i)] << 4) + charToNibble[str.charAt(i + 1)]);\n    }\n\n    return bytes;\n  },\n  stringToHexString: function stringToHexString(str) {\n    return this.byteArrayToHexString(this.stringToByteArray(str));\n  },\n  hexStringToString: function hexStringToString(hex) {\n    return this.byteArrayToString(this.hexStringToByteArray(hex));\n  },\n  checkBytesToIntInput: function checkBytesToIntInput(bytes, numBytes, opt_startIndex) {\n    var startIndex = opt_startIndex || 0;\n\n    if (startIndex < 0) {\n      throw new Error(\"Start index should not be negative\");\n    }\n\n    if (bytes.length < startIndex + numBytes) {\n      throw new Error(\"Need at least \" + numBytes + \" bytes to convert to an integer\");\n    }\n\n    return startIndex;\n  },\n  byteArrayToSignedShort: function byteArrayToSignedShort(bytes, opt_startIndex) {\n    var index = this.checkBytesToIntInput(bytes, 2, opt_startIndex);\n    var value = bytes[index];\n    value += bytes[index + 1] << 8;\n    return value;\n  },\n  byteArrayToSignedInt32: function byteArrayToSignedInt32(bytes, opt_startIndex) {\n    var index = this.checkBytesToIntInput(bytes, 4, opt_startIndex);\n    var value = bytes[index];\n    value += bytes[index + 1] << 8;\n    value += bytes[index + 2] << 16;\n    value += bytes[index + 3] << 24;\n    return value;\n  },\n  // create a wordArray that is Big-Endian\n  byteArrayToWordArray: function byteArrayToWordArray(byteArray) {\n    var i = 0,\n        offset = 0,\n        word = 0,\n        len = byteArray.length;\n    var words = new Uint32Array((len / 4 | 0) + (len % 4 == 0 ? 0 : 1));\n\n    while (i < len - len % 4) {\n      words[offset++] = byteArray[i++] << 24 | byteArray[i++] << 16 | byteArray[i++] << 8 | byteArray[i++];\n    }\n\n    if (len % 4 != 0) {\n      word = byteArray[i++] << 24;\n\n      if (len % 4 > 1) {\n        word = word | byteArray[i++] << 16;\n      }\n\n      if (len % 4 > 2) {\n        word = word | byteArray[i++] << 8;\n      }\n\n      words[offset] = word;\n    }\n\n    var wordArray = new Object();\n    wordArray.sigBytes = len;\n    wordArray.words = words;\n    return wordArray;\n  },\n  // assumes wordArray is Big-Endian\n  wordArrayToByteArray: function wordArrayToByteArray(wordArray) {\n    return Converters.wordArrayToByteArrayImpl(wordArray, true);\n  },\n  wordArrayToByteArrayImpl: function wordArrayToByteArrayImpl(wordArray, isFirstByteHasSign) {\n    var len = wordArray.words.length;\n\n    if (len == 0) {\n      return new Array(0);\n    }\n\n    var byteArray = new Array(wordArray.sigBytes);\n    var offset = 0,\n        word,\n        i;\n\n    for (i = 0; i < len - 1; i++) {\n      word = wordArray.words[i];\n      byteArray[offset++] = isFirstByteHasSign ? word >> 24 : word >> 24 & 0xff;\n      byteArray[offset++] = word >> 16 & 0xff;\n      byteArray[offset++] = word >> 8 & 0xff;\n      byteArray[offset++] = word & 0xff;\n    }\n\n    word = wordArray.words[len - 1];\n    byteArray[offset++] = isFirstByteHasSign ? word >> 24 : word >> 24 & 0xff;\n\n    if (wordArray.sigBytes % 4 == 0) {\n      byteArray[offset++] = word >> 16 & 0xff;\n      byteArray[offset++] = word >> 8 & 0xff;\n      byteArray[offset++] = word & 0xff;\n    }\n\n    if (wordArray.sigBytes % 4 > 1) {\n      byteArray[offset++] = word >> 16 & 0xff;\n    }\n\n    if (wordArray.sigBytes % 4 > 2) {\n      byteArray[offset++] = word >> 8 & 0xff;\n    }\n\n    return byteArray;\n  },\n  byteArrayToString: function byteArrayToString(bytes, opt_startIndex, length) {\n    if (length == 0) {\n      return \"\";\n    }\n\n    if (opt_startIndex && length) {\n      this.checkBytesToIntInput(bytes, parseInt(length, 10), parseInt(opt_startIndex, 10));\n      bytes = bytes.slice(opt_startIndex, opt_startIndex + length);\n    }\n\n    return decodeURIComponent(escape(String.fromCharCode.apply(null, bytes)));\n  },\n  byteArrayToShortArray: function byteArrayToShortArray(byteArray) {\n    var shortArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    var i;\n\n    for (i = 0; i < 16; i++) {\n      shortArray[i] = byteArray[i * 2] | byteArray[i * 2 + 1] << 8;\n    }\n\n    return shortArray;\n  },\n  shortArrayToByteArray: function shortArrayToByteArray(shortArray) {\n    var byteArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    var i;\n\n    for (i = 0; i < 16; i++) {\n      byteArray[2 * i] = shortArray[i] & 0xff;\n      byteArray[2 * i + 1] = shortArray[i] >> 8;\n    }\n\n    return byteArray;\n  },\n  shortArrayToHexString: function shortArrayToHexString(ary) {\n    var res = \"\";\n\n    for (var i_4 = 0; i_4 < ary.length; i_4++) {\n      res += nibbleToChar[ary[i_4] >> 4 & 0x0f] + nibbleToChar[ary[i_4] & 0x0f] + nibbleToChar[ary[i_4] >> 12 & 0x0f] + nibbleToChar[ary[i_4] >> 8 & 0x0f];\n    }\n\n    return res;\n  },\n\n  /**\n   * Produces an array of the specified number of bytes to represent the integer\n   * value. Default output encodes ints in little endian format. Handles signed\n   * as well as unsigned integers. Due to limitations in JavaScript's number\n   * format, x cannot be a true 64 bit integer (8 bytes).\n   */\n  intToBytes_: function intToBytes_(x, numBytes, unsignedMax, opt_bigEndian) {\n    var signedMax = Math.floor(unsignedMax / 2);\n    var negativeMax = (signedMax + 1) * -1;\n\n    if (x != Math.floor(x) || x < negativeMax || x > unsignedMax) {\n      throw new Error(x + \" is not a \" + numBytes * 8 + \" bit integer\");\n    }\n\n    var bytes = [];\n    var current; // Number type 0 is in the positive int range, 1 is larger than signed int,\n    // and 2 is negative int.\n\n    var numberType = x >= 0 && x <= signedMax ? 0 : x > signedMax && x <= unsignedMax ? 1 : 2;\n\n    if (numberType == 2) {\n      x = x * -1 - 1;\n    }\n\n    for (var i_5 = 0; i_5 < numBytes; i_5++) {\n      if (numberType == 2) {\n        current = 255 - x % 256;\n      } else {\n        current = x % 256;\n      }\n\n      if (opt_bigEndian) {\n        bytes.unshift(current);\n      } else {\n        bytes.push(current);\n      }\n\n      if (numberType == 1) {\n        x = Math.floor(x / 256);\n      } else {\n        x = x >> 8;\n      }\n    }\n\n    return bytes;\n  },\n  int32ToBytes: function int32ToBytes(x, opt_bigEndian) {\n    return Converters.intToBytes_(x, 4, 4294967295, opt_bigEndian);\n  },\n  int16ToBytes: function int16ToBytes(x, opt_bigEndian) {\n    return Converters.intToBytes_(x, 2, 65535, opt_bigEndian);\n  },\n\n  /**\n   * Based on https://groups.google.com/d/msg/crypto-js/TOb92tcJlU0/Eq7VZ5tpi-QJ\n   * Converts a word array to a Uint8Array.\n   * @param {WordArray} wordArray The word array.\n   * @return {Uint8Array} The Uint8Array.\n   */\n  wordArrayToByteArrayEx: function wordArrayToByteArrayEx(wordArray) {\n    // Shortcuts\n    var words = wordArray.words;\n    var sigBytes = wordArray.sigBytes; // Convert\n\n    var u8 = new Uint8Array(sigBytes);\n\n    for (var i_6 = 0; i_6 < sigBytes; i_6++) {\n      var byte = words[i_6 >>> 2] >>> 24 - i_6 % 4 * 8 & 0xff;\n      u8[i_6] = byte;\n    }\n\n    return u8;\n  },\n\n  /**\n   * Converts a Uint8Array to a word array.\n   * @param {string} u8Str The Uint8Array.\n   * @return {WordArray} The word array.\n   */\n  byteArrayToWordArrayEx: function byteArrayToWordArrayEx(u8arr) {\n    // Shortcut\n    var len = u8arr.length; // Convert\n\n    var words = [];\n\n    for (var i_7 = 0; i_7 < len; i_7++) {\n      words[i_7 >>> 2] |= (u8arr[i_7] & 0xff) << 24 - i_7 % 4 * 8;\n    }\n\n    return CryptoJS.lib.WordArray.create(words, len);\n  }\n};\nexport default Converters;",{"version":3,"sources":["/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/converters.js"],"names":["CryptoJS","charToNibble","nibbleToChar","i","character","toString","push","lowerChar","String","fromCharCode","charCodeAt","upperChar","Converters","byteArrayToHexString","bytes","str","i_1","length","stringToByteArray","unescape","encodeURIComponent","Array","i_2","hexStringToByteArray","charAt","stringToHexString","hexStringToString","hex","byteArrayToString","checkBytesToIntInput","numBytes","opt_startIndex","startIndex","Error","byteArrayToSignedShort","index","value","byteArrayToSignedInt32","byteArrayToWordArray","byteArray","offset","word","len","words","Uint32Array","wordArray","Object","sigBytes","wordArrayToByteArray","wordArrayToByteArrayImpl","isFirstByteHasSign","parseInt","slice","decodeURIComponent","escape","apply","byteArrayToShortArray","shortArray","shortArrayToByteArray","shortArrayToHexString","ary","res","i_4","intToBytes_","x","unsignedMax","opt_bigEndian","signedMax","Math","floor","negativeMax","current","numberType","i_5","unshift","int32ToBytes","int16ToBytes","wordArrayToByteArrayEx","u8","Uint8Array","i_6","byte","byteArrayToWordArrayEx","u8arr","i_7","lib","WordArray","create"],"mappings":"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","sourcesContent":["/** START OF THE LICENSED CODE */\n/******************************************************************************\n * Copyright Â© 2013-2016 The Nxt Core Developers.                             *\n *                                                                            *\n * See the AUTHORS.txt, DEVELOPER-AGREEMENT.txt and LICENSE.txt files at      *\n * the top-level directory of this distribution for the individual copyright  *\n * holder information and the developer policies on copyright and licensing.  *\n *                                                                            *\n * Unless otherwise agreed in a custom licensing agreement, no part of the    *\n * Nxt software, including this file, may be copied, modified, propagated,    *\n * or distributed except according to the terms contained in the LICENSE.txt  *\n * file.                                                                      *\n *                                                                            *\n * Removal or modification of this copyright notice is prohibited.            *\n *                                                                            *\n ******************************************************************************/\n\nimport CryptoJS from \"crypto-js\";\n\nlet charToNibble = {};\nlet nibbleToChar = [];\nlet i;\nfor (i = 0; i <= 9; ++i) {\n  let character = i.toString();\n  charToNibble[character] = i;\n  nibbleToChar.push(character);\n}\nfor (i = 10; i <= 15; ++i) {\n  let lowerChar = String.fromCharCode(\"a\".charCodeAt(0) + i - 10);\n  let upperChar = String.fromCharCode(\"A\".charCodeAt(0) + i - 10);\n  charToNibble[lowerChar] = i;\n  charToNibble[upperChar] = i;\n  nibbleToChar.push(lowerChar);\n}\n\nconst Converters = {\n  byteArrayToHexString: function(bytes) {\n    let str = \"\";\n    for (let i_1 = 0; i_1 < bytes.length; ++i_1) {\n      if (bytes[i_1] < 0) {\n        bytes[i_1] += 256;\n      }\n      str += nibbleToChar[bytes[i_1] >> 4] + nibbleToChar[bytes[i_1] & 0x0f];\n    }\n    return str;\n  },\n  stringToByteArray: function(str) {\n    str = unescape(encodeURIComponent(str));\n    let bytes = new Array(str.length);\n    for (let i_2 = 0; i_2 < str.length; ++i_2) bytes[i_2] = str.charCodeAt(i_2);\n    return bytes;\n  },\n  hexStringToByteArray: function(str) {\n    let bytes = [];\n    let i = 0;\n    if (0 !== str.length % 2) {\n      bytes.push(charToNibble[str.charAt(0)]);\n      ++i;\n    }\n    for (; i < str.length - 1; i += 2)\n      bytes.push(\n        (charToNibble[str.charAt(i)] << 4) + charToNibble[str.charAt(i + 1)]\n      );\n    return bytes;\n  },\n  stringToHexString: function(str) {\n    return this.byteArrayToHexString(this.stringToByteArray(str));\n  },\n  hexStringToString: function(hex) {\n    return this.byteArrayToString(this.hexStringToByteArray(hex));\n  },\n  checkBytesToIntInput: function(bytes, numBytes, opt_startIndex) {\n    let startIndex = opt_startIndex || 0;\n    if (startIndex < 0) {\n      throw new Error(\"Start index should not be negative\");\n    }\n    if (bytes.length < startIndex + numBytes) {\n      throw new Error(\n        \"Need at least \" + numBytes + \" bytes to convert to an integer\"\n      );\n    }\n    return startIndex;\n  },\n  byteArrayToSignedShort: function(bytes, opt_startIndex) {\n    let index = this.checkBytesToIntInput(bytes, 2, opt_startIndex);\n    let value = bytes[index];\n    value += bytes[index + 1] << 8;\n    return value;\n  },\n  byteArrayToSignedInt32: function(bytes, opt_startIndex) {\n    let index = this.checkBytesToIntInput(bytes, 4, opt_startIndex);\n    let value = bytes[index];\n    value += bytes[index + 1] << 8;\n    value += bytes[index + 2] << 16;\n    value += bytes[index + 3] << 24;\n    return value;\n  },\n  // create a wordArray that is Big-Endian\n  byteArrayToWordArray: function(byteArray) {\n    let i = 0,\n      offset = 0,\n      word = 0,\n      len = byteArray.length;\n    let words = new Uint32Array(((len / 4) | 0) + (len % 4 == 0 ? 0 : 1));\n    while (i < len - (len % 4)) {\n      words[offset++] =\n        (byteArray[i++] << 24) |\n        (byteArray[i++] << 16) |\n        (byteArray[i++] << 8) |\n        byteArray[i++];\n    }\n    if (len % 4 != 0) {\n      word = byteArray[i++] << 24;\n      if (len % 4 > 1) {\n        word = word | (byteArray[i++] << 16);\n      }\n      if (len % 4 > 2) {\n        word = word | (byteArray[i++] << 8);\n      }\n      words[offset] = word;\n    }\n    let wordArray = new Object();\n    wordArray.sigBytes = len;\n    wordArray.words = words;\n    return wordArray;\n  },\n  // assumes wordArray is Big-Endian\n  wordArrayToByteArray: function(wordArray) {\n    return Converters.wordArrayToByteArrayImpl(wordArray, true);\n  },\n  wordArrayToByteArrayImpl: function(wordArray, isFirstByteHasSign) {\n    let len = wordArray.words.length;\n    if (len == 0) {\n      return new Array(0);\n    }\n    let byteArray = new Array(wordArray.sigBytes);\n    let offset = 0,\n      word,\n      i;\n    for (i = 0; i < len - 1; i++) {\n      word = wordArray.words[i];\n      byteArray[offset++] = isFirstByteHasSign\n        ? word >> 24\n        : (word >> 24) & 0xff;\n      byteArray[offset++] = (word >> 16) & 0xff;\n      byteArray[offset++] = (word >> 8) & 0xff;\n      byteArray[offset++] = word & 0xff;\n    }\n    word = wordArray.words[len - 1];\n    byteArray[offset++] = isFirstByteHasSign ? word >> 24 : (word >> 24) & 0xff;\n    if (wordArray.sigBytes % 4 == 0) {\n      byteArray[offset++] = (word >> 16) & 0xff;\n      byteArray[offset++] = (word >> 8) & 0xff;\n      byteArray[offset++] = word & 0xff;\n    }\n    if (wordArray.sigBytes % 4 > 1) {\n      byteArray[offset++] = (word >> 16) & 0xff;\n    }\n    if (wordArray.sigBytes % 4 > 2) {\n      byteArray[offset++] = (word >> 8) & 0xff;\n    }\n    return byteArray;\n  },\n  byteArrayToString: function(bytes, opt_startIndex, length) {\n    if (length == 0) {\n      return \"\";\n    }\n    if (opt_startIndex && length) {\n      this.checkBytesToIntInput(\n        bytes,\n        parseInt(length, 10),\n        parseInt(opt_startIndex, 10)\n      );\n      bytes = bytes.slice(opt_startIndex, opt_startIndex + length);\n    }\n    return decodeURIComponent(escape(String.fromCharCode.apply(null, bytes)));\n  },\n  byteArrayToShortArray: function(byteArray) {\n    let shortArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let i;\n    for (i = 0; i < 16; i++) {\n      shortArray[i] = byteArray[i * 2] | (byteArray[i * 2 + 1] << 8);\n    }\n    return shortArray;\n  },\n  shortArrayToByteArray: function(shortArray) {\n    let byteArray = [\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0\n    ];\n    let i;\n    for (i = 0; i < 16; i++) {\n      byteArray[2 * i] = shortArray[i] & 0xff;\n      byteArray[2 * i + 1] = shortArray[i] >> 8;\n    }\n    return byteArray;\n  },\n  shortArrayToHexString: function(ary) {\n    let res = \"\";\n    for (let i_4 = 0; i_4 < ary.length; i_4++) {\n      res +=\n        nibbleToChar[(ary[i_4] >> 4) & 0x0f] +\n        nibbleToChar[ary[i_4] & 0x0f] +\n        nibbleToChar[(ary[i_4] >> 12) & 0x0f] +\n        nibbleToChar[(ary[i_4] >> 8) & 0x0f];\n    }\n    return res;\n  },\n  /**\n   * Produces an array of the specified number of bytes to represent the integer\n   * value. Default output encodes ints in little endian format. Handles signed\n   * as well as unsigned integers. Due to limitations in JavaScript's number\n   * format, x cannot be a true 64 bit integer (8 bytes).\n   */\n  intToBytes_: function(x, numBytes, unsignedMax, opt_bigEndian) {\n    let signedMax = Math.floor(unsignedMax / 2);\n    let negativeMax = (signedMax + 1) * -1;\n    if (x != Math.floor(x) || x < negativeMax || x > unsignedMax) {\n      throw new Error(x + \" is not a \" + numBytes * 8 + \" bit integer\");\n    }\n    let bytes = [];\n    let current;\n    // Number type 0 is in the positive int range, 1 is larger than signed int,\n    // and 2 is negative int.\n    let numberType =\n      x >= 0 && x <= signedMax ? 0 : x > signedMax && x <= unsignedMax ? 1 : 2;\n    if (numberType == 2) {\n      x = x * -1 - 1;\n    }\n    for (let i_5 = 0; i_5 < numBytes; i_5++) {\n      if (numberType == 2) {\n        current = 255 - (x % 256);\n      } else {\n        current = x % 256;\n      }\n      if (opt_bigEndian) {\n        bytes.unshift(current);\n      } else {\n        bytes.push(current);\n      }\n      if (numberType == 1) {\n        x = Math.floor(x / 256);\n      } else {\n        x = x >> 8;\n      }\n    }\n    return bytes;\n  },\n  int32ToBytes: function(x, opt_bigEndian) {\n    return Converters.intToBytes_(x, 4, 4294967295, opt_bigEndian);\n  },\n  int16ToBytes: function(x, opt_bigEndian) {\n    return Converters.intToBytes_(x, 2, 65535, opt_bigEndian);\n  },\n  /**\n   * Based on https://groups.google.com/d/msg/crypto-js/TOb92tcJlU0/Eq7VZ5tpi-QJ\n   * Converts a word array to a Uint8Array.\n   * @param {WordArray} wordArray The word array.\n   * @return {Uint8Array} The Uint8Array.\n   */\n  wordArrayToByteArrayEx: function(wordArray) {\n    // Shortcuts\n    let words = wordArray.words;\n    let sigBytes = wordArray.sigBytes;\n    // Convert\n    let u8 = new Uint8Array(sigBytes);\n    for (let i_6 = 0; i_6 < sigBytes; i_6++) {\n      let byte = (words[i_6 >>> 2] >>> (24 - (i_6 % 4) * 8)) & 0xff;\n      u8[i_6] = byte;\n    }\n    return u8;\n  },\n  /**\n   * Converts a Uint8Array to a word array.\n   * @param {string} u8Str The Uint8Array.\n   * @return {WordArray} The word array.\n   */\n  byteArrayToWordArrayEx: function(u8arr) {\n    // Shortcut\n    let len = u8arr.length;\n    // Convert\n    let words = [];\n    for (let i_7 = 0; i_7 < len; i_7++) {\n      words[i_7 >>> 2] |= (u8arr[i_7] & 0xff) << (24 - (i_7 % 4) * 8);\n    }\n    return CryptoJS.lib.WordArray.create(words, len);\n  }\n};\n\nexport default Converters;\n"]}]}