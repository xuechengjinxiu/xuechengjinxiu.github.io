{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VAppBar/VAppBar.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VAppBar/VAppBar.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.string.fixed\";\nimport _defineProperty from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Styles\nimport \"../../../src/components/VAppBar/VAppBar.sass\"; // Extensions\n\nimport VToolbar from \"../VToolbar/VToolbar\"; // Directives\n\nimport Scroll from \"../../directives/scroll\"; // Mixins\n\nimport Applicationable from \"../../mixins/applicationable\";\nimport Scrollable from \"../../mixins/scrollable\";\nimport SSRBootable from \"../../mixins/ssr-bootable\";\nimport Toggleable from \"../../mixins/toggleable\"; // Utilities\n\nimport { convertToUnit } from \"../../util/helpers\";\nimport mixins from \"../../util/mixins\";\nvar baseMixins = mixins(VToolbar, Scrollable, SSRBootable, Toggleable, Applicationable('top', ['clippedLeft', 'clippedRight', 'computedHeight', 'invertedScroll', 'isExtended', 'isProminent', 'value']));\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'v-app-bar',\n  directives: {\n    Scroll: Scroll\n  },\n  props: {\n    clippedLeft: Boolean,\n    clippedRight: Boolean,\n    collapseOnScroll: Boolean,\n    elevateOnScroll: Boolean,\n    fadeImgOnScroll: Boolean,\n    hideOnScroll: Boolean,\n    invertedScroll: Boolean,\n    scrollOffScreen: Boolean,\n    shrinkOnScroll: Boolean,\n    value: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      isActive: this.value\n    };\n  },\n  computed: {\n    applicationProperty: function applicationProperty() {\n      return !this.bottom ? 'top' : 'bottom';\n    },\n    canScroll: function canScroll() {\n      return Scrollable.options.computed.canScroll.call(this) && (this.invertedScroll || this.elevateOnScroll || this.hideOnScroll || this.collapseOnScroll || this.isBooted || // If falsey, user has provided an\n      // explicit value which should\n      // overwrite anything we do\n      !this.value);\n    },\n    classes: function classes() {\n      return _objectSpread({}, VToolbar.options.computed.classes.call(this), {\n        'v-toolbar--collapse': this.collapse || this.collapseOnScroll,\n        'v-app-bar': true,\n        'v-app-bar--clipped': this.clippedLeft || this.clippedRight,\n        'v-app-bar--fade-img-on-scroll': this.fadeImgOnScroll,\n        'v-app-bar--elevate-on-scroll': this.elevateOnScroll,\n        'v-app-bar--fixed': !this.absolute && (this.app || this.fixed),\n        'v-app-bar--hide-shadow': this.hideShadow,\n        'v-app-bar--is-scrolled': this.currentScroll > 0,\n        'v-app-bar--shrink-on-scroll': this.shrinkOnScroll\n      });\n    },\n    computedContentHeight: function computedContentHeight() {\n      if (!this.shrinkOnScroll) return VToolbar.options.computed.computedContentHeight.call(this);\n      var height = this.computedOriginalHeight;\n      var min = this.dense ? 48 : 56;\n      var max = height;\n      var difference = max - min;\n      var iteration = difference / this.computedScrollThreshold;\n      var offset = this.currentScroll * iteration;\n      return Math.max(min, max - offset);\n    },\n    computedFontSize: function computedFontSize() {\n      if (!this.isProminent) return undefined;\n      var max = this.dense ? 96 : 128;\n      var difference = max - this.computedContentHeight;\n      var increment = 0.00347; // 1.5rem to a minimum of 1.25rem\n\n      return Number((1.50 - difference * increment).toFixed(2));\n    },\n    computedLeft: function computedLeft() {\n      if (!this.app || this.clippedLeft) return 0;\n      return this.$vuetify.application.left;\n    },\n    computedMarginTop: function computedMarginTop() {\n      if (!this.app) return 0;\n      return this.$vuetify.application.bar;\n    },\n    computedOpacity: function computedOpacity() {\n      if (!this.fadeImgOnScroll) return undefined;\n      var opacity = Math.max((this.computedScrollThreshold - this.currentScroll) / this.computedScrollThreshold, 0);\n      return Number(parseFloat(opacity).toFixed(2));\n    },\n    computedOriginalHeight: function computedOriginalHeight() {\n      var height = VToolbar.options.computed.computedContentHeight.call(this);\n      if (this.isExtended) height += parseInt(this.extensionHeight);\n      return height;\n    },\n    computedRight: function computedRight() {\n      if (!this.app || this.clippedRight) return 0;\n      return this.$vuetify.application.right;\n    },\n    computedScrollThreshold: function computedScrollThreshold() {\n      if (this.scrollThreshold) return Number(this.scrollThreshold);\n      return this.computedOriginalHeight - (this.dense ? 48 : 56);\n    },\n    computedTransform: function computedTransform() {\n      if (!this.canScroll || this.elevateOnScroll && this.currentScroll === 0) return 0;\n      if (this.isActive) return 0;\n      var scrollOffScreen = this.scrollOffScreen ? this.computedHeight : this.computedContentHeight;\n      return this.bottom ? scrollOffScreen : -scrollOffScreen;\n    },\n    hideShadow: function hideShadow() {\n      if (this.elevateOnScroll && this.isExtended) {\n        return this.currentScroll < this.computedScrollThreshold;\n      }\n\n      if (this.elevateOnScroll) {\n        return this.currentScroll === 0 || this.computedTransform < 0;\n      }\n\n      return (!this.isExtended || this.scrollOffScreen) && this.computedTransform !== 0;\n    },\n    isCollapsed: function isCollapsed() {\n      if (!this.collapseOnScroll) {\n        return VToolbar.options.computed.isCollapsed.call(this);\n      }\n\n      return this.currentScroll > 0;\n    },\n    isProminent: function isProminent() {\n      return VToolbar.options.computed.isProminent.call(this) || this.shrinkOnScroll;\n    },\n    styles: function styles() {\n      return _objectSpread({}, VToolbar.options.computed.styles.call(this), {\n        fontSize: convertToUnit(this.computedFontSize, 'rem'),\n        marginTop: convertToUnit(this.computedMarginTop),\n        transform: \"translateY(\".concat(convertToUnit(this.computedTransform), \")\"),\n        left: convertToUnit(this.computedLeft),\n        right: convertToUnit(this.computedRight)\n      });\n    }\n  },\n  watch: {\n    canScroll: 'onScroll',\n    computedTransform: function computedTransform() {\n      // Normally we do not want the v-app-bar\n      // to update the application top value\n      // to avoid screen jump. However, in\n      // this situation, we must so that\n      // the clipped drawer can update\n      // its top value when scrolled\n      if (!this.canScroll || !this.clippedLeft && !this.clippedRight) return;\n      this.callUpdate();\n    },\n    invertedScroll: function invertedScroll(val) {\n      this.isActive = !val;\n    }\n  },\n  created: function created() {\n    if (this.invertedScroll) this.isActive = false;\n  },\n  methods: {\n    genBackground: function genBackground() {\n      var render = VToolbar.options.methods.genBackground.call(this);\n      render.data = this._b(render.data || {}, render.tag, {\n        style: {\n          opacity: this.computedOpacity\n        }\n      });\n      return render;\n    },\n    updateApplication: function updateApplication() {\n      return this.invertedScroll ? 0 : this.computedHeight + this.computedTransform;\n    },\n    thresholdMet: function thresholdMet() {\n      if (this.invertedScroll) {\n        this.isActive = this.currentScroll > this.computedScrollThreshold;\n        return;\n      }\n\n      if (this.currentThreshold < this.computedScrollThreshold) return;\n\n      if (this.hideOnScroll) {\n        this.isActive = this.isScrollingUp;\n      }\n\n      this.savedScroll = this.currentScroll;\n    }\n  },\n  render: function render(h) {\n    var render = VToolbar.options.render.call(this, h);\n    render.data = render.data || {};\n\n    if (this.canScroll) {\n      render.data.directives = render.data.directives || [];\n      render.data.directives.push({\n        arg: this.scrollTarget,\n        name: 'scroll',\n        value: this.onScroll\n      });\n    }\n\n    return render;\n  }\n});",null]}