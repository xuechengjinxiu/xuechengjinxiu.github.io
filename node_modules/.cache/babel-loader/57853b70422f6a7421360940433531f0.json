{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VDataTable/VDataTable.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VDataTable/VDataTable.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"../../../src/components/VDataTable/VDataTable.sass\"; // Components\n\nimport { VData } from '../VData';\nimport { VDataFooter, VDataIterator } from '../VDataIterator';\nimport VBtn from '../VBtn';\nimport VDataTableHeader from './VDataTableHeader'; // import VVirtualTable from './VVirtualTable'\n\nimport VIcon from '../VIcon';\nimport VProgressLinear from '../VProgressLinear';\nimport Row from './Row';\nimport RowGroup from './RowGroup';\nimport VSimpleCheckbox from '../VCheckbox/VSimpleCheckbox';\nimport VSimpleTable from './VSimpleTable';\nimport MobileRow from './MobileRow';\nimport ripple from '../../directives/ripple'; // Helpers\n\nimport { deepEqual, getObjectValueByPath, getPrefixedScopedSlots, getSlot, defaultFilter, camelizeObjectKeys } from '../../util/helpers';\nimport { breaking } from '../../util/console';\n\nfunction filterFn(item, search, filter) {\n  return header => {\n    const value = getObjectValueByPath(item, header.value);\n    return header.filter ? header.filter(value, search, item) : filter(value, search, item);\n  };\n}\n\nfunction searchTableItems(items, search, headersWithCustomFilters, headersWithoutCustomFilters, customFilter) {\n  let filtered = items;\n  search = typeof search === 'string' ? search.trim() : null;\n\n  if (search && headersWithoutCustomFilters.length) {\n    filtered = items.filter(item => headersWithoutCustomFilters.some(filterFn(item, search, customFilter)));\n  }\n\n  if (headersWithCustomFilters.length) {\n    filtered = filtered.filter(item => headersWithCustomFilters.every(filterFn(item, search, defaultFilter)));\n  }\n\n  return filtered;\n}\n/* @vue/component */\n\n\nexport default VDataIterator.extend({\n  name: 'v-data-table',\n  // https://github.com/vuejs/vue/issues/6872\n  directives: {\n    ripple\n  },\n  props: {\n    headers: {\n      type: Array\n    },\n    showSelect: Boolean,\n    showExpand: Boolean,\n    showGroupBy: Boolean,\n    // TODO: Fix\n    // virtualRows: Boolean,\n    mobileBreakpoint: {\n      type: Number,\n      default: 600\n    },\n    height: [Number, String],\n    hideDefaultHeader: Boolean,\n    caption: String,\n    dense: Boolean,\n    headerProps: Object,\n    calculateWidths: Boolean,\n    fixedHeader: Boolean,\n    headersLength: Number,\n    expandIcon: {\n      type: String,\n      default: '$vuetify.icons.expand'\n    },\n    customFilter: {\n      type: Function,\n      default: defaultFilter\n    }\n  },\n\n  data() {\n    return {\n      internalGroupBy: [],\n      openCache: {},\n      widths: []\n    };\n  },\n\n  computed: {\n    computedHeaders() {\n      if (!this.headers) return [];\n      const headers = this.headers.filter(h => h.value === undefined || !this.internalGroupBy.find(v => v === h.value));\n      const defaultHeader = {\n        text: '',\n        sortable: false,\n        width: '1px'\n      };\n\n      if (this.showSelect) {\n        const index = headers.findIndex(h => h.value === 'data-table-select');\n        if (index < 0) headers.unshift({ ...defaultHeader,\n          value: 'data-table-select'\n        });else headers.splice(index, 1, { ...defaultHeader,\n          ...headers[index]\n        });\n      }\n\n      if (this.showExpand) {\n        const index = headers.findIndex(h => h.value === 'data-table-expand');\n        if (index < 0) headers.unshift({ ...defaultHeader,\n          value: 'data-table-expand'\n        });else headers.splice(index, 1, { ...defaultHeader,\n          ...headers[index]\n        });\n      }\n\n      return headers;\n    },\n\n    colspanAttrs() {\n      return this.isMobile ? undefined : {\n        colspan: this.headersLength || this.computedHeaders.length\n      };\n    },\n\n    isMobile() {\n      // Guard against SSR render\n      // https://github.com/vuetifyjs/vuetify/issues/7410\n      if (this.$vuetify.breakpoint.width === 0) return false;\n      return this.$vuetify.breakpoint.width < this.mobileBreakpoint;\n    },\n\n    columnSorters() {\n      return this.computedHeaders.reduce((acc, header) => {\n        if (header.sort) acc[header.value] = header.sort;\n        return acc;\n      }, {});\n    },\n\n    headersWithCustomFilters() {\n      return this.computedHeaders.filter(header => header.filter);\n    },\n\n    headersWithoutCustomFilters() {\n      return this.computedHeaders.filter(header => !header.filter);\n    },\n\n    sanitizedHeaderProps() {\n      return camelizeObjectKeys(this.headerProps);\n    },\n\n    computedItemsPerPage() {\n      const itemsPerPage = this.options && this.options.itemsPerPage ? this.options.itemsPerPage : this.itemsPerPage;\n\n      if (this.sanitizedFooterProps.itemsPerPageOptions && !this.sanitizedFooterProps.itemsPerPageOptions.includes(itemsPerPage)) {\n        const firstOption = this.sanitizedFooterProps.itemsPerPageOptions[0];\n        return typeof firstOption === 'object' ? firstOption.value : firstOption;\n      }\n\n      return itemsPerPage;\n    }\n\n  },\n\n  created() {\n    const breakingProps = [['sort-icon', 'header-props.sort-icon'], ['hide-headers', 'hide-default-header'], ['select-all', 'show-select']];\n    /* istanbul ignore next */\n\n    breakingProps.forEach(([original, replacement]) => {\n      if (this.$attrs.hasOwnProperty(original)) breaking(original, replacement, this);\n    });\n  },\n\n  mounted() {\n    // if ((!this.sortBy || !this.sortBy.length) && (!this.options.sortBy || !this.options.sortBy.length)) {\n    //   const firstSortable = this.headers.find(h => !('sortable' in h) || !!h.sortable)\n    //   if (firstSortable) this.updateOptions({ sortBy: [firstSortable.value], sortDesc: [false] })\n    // }\n    if (this.calculateWidths) {\n      window.addEventListener('resize', this.calcWidths);\n      this.calcWidths();\n    }\n  },\n\n  beforeDestroy() {\n    if (this.calculateWidths) {\n      window.removeEventListener('resize', this.calcWidths);\n    }\n  },\n\n  methods: {\n    calcWidths() {\n      this.widths = Array.from(this.$el.querySelectorAll('th')).map(e => e.clientWidth);\n    },\n\n    customFilterWithColumns(items, search) {\n      return searchTableItems(items, search, this.headersWithCustomFilters, this.headersWithoutCustomFilters, this.customFilter);\n    },\n\n    customSortWithHeaders(items, sortBy, sortDesc, locale) {\n      return this.customSort(items, sortBy, sortDesc, locale, this.columnSorters);\n    },\n\n    createItemProps(item) {\n      const props = VDataIterator.options.methods.createItemProps.call(this, item);\n      return Object.assign(props, {\n        headers: this.computedHeaders\n      });\n    },\n\n    genCaption(props) {\n      if (this.caption) return [this.$createElement('caption', [this.caption])];\n      return getSlot(this, 'caption', props, true);\n    },\n\n    genColgroup(props) {\n      return this.$createElement('colgroup', this.computedHeaders.map(header => {\n        return this.$createElement('col', {\n          class: {\n            divider: header.divider\n          }\n        });\n      }));\n    },\n\n    genLoading() {\n      const progress = this.$slots['progress'] ? this.$slots.progress : this.$createElement(VProgressLinear, {\n        props: {\n          color: this.loading === true ? 'primary' : this.loading,\n          height: 2,\n          indeterminate: true\n        }\n      });\n      const th = this.$createElement('th', {\n        staticClass: 'column',\n        attrs: this.colspanAttrs\n      }, [progress]);\n      const tr = this.$createElement('tr', {\n        staticClass: 'v-data-table__progress'\n      }, [th]);\n      return this.$createElement('thead', [tr]);\n    },\n\n    genHeaders(props) {\n      const data = {\n        props: { ...this.sanitizedHeaderProps,\n          headers: this.computedHeaders,\n          options: props.options,\n          mobile: this.isMobile,\n          showGroupBy: this.showGroupBy,\n          someItems: this.someItems,\n          everyItem: this.everyItem,\n          singleSelect: this.singleSelect,\n          disableSort: this.disableSort\n        },\n        on: {\n          sort: props.sort,\n          group: props.group,\n          'toggle-select-all': this.toggleSelectAll\n        }\n      };\n      const children = [getSlot(this, 'header', data)];\n\n      if (!this.hideDefaultHeader) {\n        const scopedSlots = getPrefixedScopedSlots('header.', this.$scopedSlots);\n        children.push(this.$createElement(VDataTableHeader, { ...data,\n          scopedSlots\n        }));\n      }\n\n      if (this.loading) children.push(this.genLoading());\n      return children;\n    },\n\n    genEmptyWrapper(content) {\n      return this.$createElement('tr', {\n        staticClass: 'v-data-table__empty-wrapper'\n      }, [this.$createElement('td', {\n        attrs: this.colspanAttrs\n      }, content)]);\n    },\n\n    genItems(items, props) {\n      const empty = this.genEmpty(props.pagination.itemsLength);\n      if (empty) return [empty];\n      return props.groupedItems ? this.genGroupedRows(props.groupedItems, props) : this.genRows(items, props);\n    },\n\n    genGroupedRows(groupedItems, props) {\n      const groups = Object.keys(groupedItems || {});\n      return groups.map(group => {\n        if (!this.openCache.hasOwnProperty(group)) this.$set(this.openCache, group, true);\n\n        if (this.$scopedSlots.group) {\n          return this.$scopedSlots.group({\n            group,\n            options: props.options,\n            items: groupedItems[group],\n            headers: this.computedHeaders\n          });\n        } else {\n          return this.genDefaultGroupedRow(group, groupedItems[group], props);\n        }\n      });\n    },\n\n    genDefaultGroupedRow(group, items, props) {\n      const isOpen = !!this.openCache[group];\n      const children = [this.$createElement('template', {\n        slot: 'row.content'\n      }, this.genDefaultRows(items, props))];\n\n      if (this.$scopedSlots['group.header']) {\n        children.unshift(this.$createElement('template', {\n          slot: 'column.header'\n        }, [this.$scopedSlots['group.header']({\n          group,\n          groupBy: props.options.groupBy,\n          items,\n          headers: this.computedHeaders\n        })]));\n      } else {\n        const toggle = this.$createElement(VBtn, {\n          staticClass: 'ma-0',\n          props: {\n            icon: true,\n            small: true\n          },\n          on: {\n            click: () => this.$set(this.openCache, group, !this.openCache[group])\n          }\n        }, [this.$createElement(VIcon, [isOpen ? '$vuetify.icons.minus' : '$vuetify.icons.plus'])]);\n        const remove = this.$createElement(VBtn, {\n          staticClass: 'ma-0',\n          props: {\n            icon: true,\n            small: true\n          },\n          on: {\n            click: () => props.updateOptions({\n              groupBy: [],\n              groupDesc: []\n            })\n          }\n        }, [this.$createElement(VIcon, ['$vuetify.icons.close'])]);\n        const column = this.$createElement('td', {\n          staticClass: 'text-start',\n          attrs: this.colspanAttrs\n        }, [toggle, `${props.options.groupBy[0]}: ${group}`, remove]);\n        children.unshift(this.$createElement('template', {\n          slot: 'column.header'\n        }, [column]));\n      }\n\n      if (this.$scopedSlots['group.summary']) {\n        children.push(this.$createElement('template', {\n          slot: 'column.summary'\n        }, [this.$scopedSlots['group.summary']({\n          group,\n          groupBy: props.options.groupBy,\n          items,\n          headers: this.computedHeaders\n        })]));\n      }\n\n      return this.$createElement(RowGroup, {\n        key: group,\n        props: {\n          value: isOpen\n        }\n      }, children);\n    },\n\n    genRows(items, props) {\n      return this.$scopedSlots.item ? this.genScopedRows(items, props) : this.genDefaultRows(items, props);\n    },\n\n    genScopedRows(items, props) {\n      const rows = [];\n\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        rows.push(this.$scopedSlots.item({ ...this.createItemProps(item),\n          index: i\n        }));\n\n        if (this.isExpanded(item)) {\n          rows.push(this.$scopedSlots['expanded-item']({\n            item,\n            headers: this.computedHeaders\n          }));\n        }\n      }\n\n      return rows;\n    },\n\n    genDefaultRows(items, props) {\n      return this.$scopedSlots['expanded-item'] ? items.map(item => this.genDefaultExpandedRow(item)) : items.map(item => this.genDefaultSimpleRow(item));\n    },\n\n    genDefaultExpandedRow(item) {\n      const isExpanded = this.isExpanded(item);\n      const headerRow = this.genDefaultSimpleRow(item, isExpanded ? 'expanded expanded__row' : null);\n      const expandedRow = this.$createElement('tr', {\n        staticClass: 'expanded expanded__content'\n      }, [this.$scopedSlots['expanded-item']({\n        item,\n        headers: this.computedHeaders\n      })]);\n      return this.$createElement(RowGroup, {\n        props: {\n          value: isExpanded\n        }\n      }, [this.$createElement('template', {\n        slot: 'row.header'\n      }, [headerRow]), this.$createElement('template', {\n        slot: 'row.content'\n      }, [expandedRow])]);\n    },\n\n    genDefaultSimpleRow(item, classes = null) {\n      const scopedSlots = getPrefixedScopedSlots('item.', this.$scopedSlots);\n      const data = this.createItemProps(item);\n\n      if (this.showSelect) {\n        const slot = scopedSlots['data-table-select'];\n        scopedSlots['data-table-select'] = slot ? () => slot(data) : () => this.$createElement(VSimpleCheckbox, {\n          staticClass: 'v-data-table__checkbox',\n          props: {\n            value: data.isSelected\n          },\n          on: {\n            input: val => data.select(val)\n          }\n        });\n      }\n\n      if (this.showExpand) {\n        const slot = scopedSlots['data-table-expand'];\n        scopedSlots['data-table-expand'] = slot ? () => slot(data) : () => this.$createElement(VIcon, {\n          staticClass: 'v-data-table__expand-icon',\n          class: {\n            'v-data-table__expand-icon--active': data.isExpanded\n          },\n          on: {\n            click: e => {\n              e.stopPropagation();\n              data.expand(!data.isExpanded);\n            }\n          }\n        }, [this.expandIcon]);\n      }\n\n      return this.$createElement(this.isMobile ? MobileRow : Row, {\n        key: getObjectValueByPath(item, this.itemKey),\n        class: classes,\n        props: {\n          headers: this.computedHeaders,\n          item,\n          rtl: this.$vuetify.rtl\n        },\n        scopedSlots,\n        on: {\n          click: () => this.$emit('click:row', item)\n        }\n      });\n    },\n\n    genBody(props) {\n      const data = { ...props,\n        isMobile: this.isMobile,\n        headers: this.computedHeaders\n      };\n\n      if (this.$scopedSlots.body) {\n        return this.$scopedSlots.body(data);\n      }\n\n      return this.$createElement('tbody', [getSlot(this, 'body.prepend', data, true), this.genItems(props.items, props), getSlot(this, 'body.append', data, true)]);\n    },\n\n    genFooters(props) {\n      const data = {\n        props: {\n          options: props.options,\n          pagination: props.pagination,\n          itemsPerPageText: '$vuetify.dataTable.itemsPerPageText',\n          ...this.sanitizedFooterProps\n        },\n        on: {\n          'update:options': value => props.updateOptions(value)\n        },\n        widths: this.widths,\n        headers: this.computedHeaders\n      };\n      const children = [getSlot(this, 'footer', data, true)];\n\n      if (!this.hideDefaultFooter) {\n        children.push(this.$createElement(VDataFooter, { ...data,\n          scopedSlots: getPrefixedScopedSlots('footer.', this.$scopedSlots)\n        }));\n      }\n\n      return children;\n    },\n\n    genDefaultScopedSlot(props) {\n      const simpleProps = {\n        height: this.height,\n        fixedHeader: this.fixedHeader,\n        dense: this.dense\n      }; // if (this.virtualRows) {\n      //   return this.$createElement(VVirtualTable, {\n      //     props: Object.assign(simpleProps, {\n      //       items: props.items,\n      //       height: this.height,\n      //       rowHeight: this.dense ? 24 : 48,\n      //       headerHeight: this.dense ? 32 : 48,\n      //       // TODO: expose rest of props from virtual table?\n      //     }),\n      //     scopedSlots: {\n      //       items: ({ items }) => this.genItems(items, props) as any,\n      //     },\n      //   }, [\n      //     this.proxySlot('body.before', [this.genCaption(props), this.genHeaders(props)]),\n      //     this.proxySlot('bottom', this.genFooters(props)),\n      //   ])\n      // }\n\n      return this.$createElement(VSimpleTable, {\n        props: simpleProps\n      }, [this.proxySlot('top', getSlot(this, 'top', props, true)), this.genCaption(props), this.genColgroup(props), this.genHeaders(props), this.genBody(props), this.proxySlot('bottom', this.genFooters(props))]);\n    },\n\n    proxySlot(slot, content) {\n      return this.$createElement('template', {\n        slot\n      }, content);\n    }\n\n  },\n\n  render() {\n    return this.$createElement(VData, {\n      props: { ...this.$props,\n        customFilter: this.customFilterWithColumns,\n        customSort: this.customSortWithHeaders,\n        itemsPerPage: this.computedItemsPerPage\n      },\n      on: {\n        'update:options': (v, old) => {\n          this.internalGroupBy = v.groupBy || [];\n          !deepEqual(v, old) && this.$emit('update:options', v);\n        },\n        'update:page': v => this.$emit('update:page', v),\n        'update:items-per-page': v => this.$emit('update:items-per-page', v),\n        'update:sort-by': v => this.$emit('update:sort-by', v),\n        'update:sort-desc': v => this.$emit('update:sort-desc', v),\n        'update:group-by': v => this.$emit('update:group-by', v),\n        'update:group-desc': v => this.$emit('update:group-desc', v),\n        pagination: (v, old) => !deepEqual(v, old) && this.$emit('pagination', v),\n        'current-items': v => {\n          this.internalCurrentItems = v;\n          this.$emit('current-items', v);\n        },\n        'page-count': v => this.$emit('page-count', v)\n      },\n      scopedSlots: {\n        default: this.genDefaultScopedSlot\n      }\n    });\n  }\n\n});",null]}