{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/views/HomeContent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/views/HomeContent.vue","mtime":1585119550000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TimeAgo from \"vue2-timeago\";\nimport { QrcodeStream } from \"vue-qrcode-reader\";\nimport { mapState, mapGetters } from \"vuex\";\nimport scanQrStyle from \"@/views/Home/scanQrStyle.vue\";\nimport crypto from \"@/libs1/crypto\";\nimport InfiniteLoading from \"vue-infinite-loading\";\nexport default {\n  data: () => ({\n    alias: \"\",\n    records: [],\n    lastKey: \"\",\n    lastType: \"all\",\n    isloading: false,\n    timer: \"\",\n    infiniteId: +new Date(),\n    address: \"\",\n    dialog: false,\n    scanOverlay: false,\n    scanOverlay1: false,\n    openCamera: \"off\",\n    qrImportInit: false,\n    editingAddress: false,\n    typetransation: \"All\",\n    txTypes: [\"All\", \"Income\", \"Out\"],\n    menuOn: false\n  }),\n\n  created() {\n    //get current address\n    this.address = this.wallets[this.currentIndex].address;\n    //get current alias\n    this.alias = JSON.parse(window.localStorage[\"alias\"])[this.currentIndex];\n    this.requestData();\n  },\n\n  mounted() {\n    this.timer = setTimeout(this.refreshTimer, 200000);\n    this.resizeRecords();\n  },\n\n  beforeDestroy() {\n    this.$utils.enableBodyScroll();\n    clearTimeout(this.timer);\n  },\n  watch: {\n    scanOverlay1(nv) {\n      this.$utils.lockScroll(nv);\n    }\n  },\n  computed: {\n    ...mapState([\"wallets\", \"currentIndex\", \"unity\"]),\n    ...mapGetters([\"balance\"])\n  },\n  methods: {\n    refreshTimer() {\n      if (this.isloading) return;\n      this.infiniteReload();\n      this.timer = setTimeout(this.refreshTimer, 200000);\n    },\n    typeChange(type) {\n      //change records type and then refresh records data\n      this.typetransation = type;\n      this.lastType = {\n        All: \"all\",\n        Income: \"in\",\n        Out: \"out\"\n      }[type];\n      this.refreshData();\n    },\n    resizeRecords() {\n      //adjust min-height of records-list\n      if (this.$refs[\"records-list\"].style.minHeight) return;\n      const bp = this.$vuetify.breakpoint;\n      //use window.innerHeight instead of vh\n      if (bp.sm) {\n        this.$refs[\"records-list\"].style.minHeight = `${window.innerHeight -\n          0.45 * window.innerWidth -\n          181}px`;\n      }\n      if (bp.md) {\n        this.$refs[\"records-list\"].style.minHeight = `${window.innerHeight -\n          385}px`;\n      }\n      if (bp.lg || bp.xl) {\n        this.$refs[\"records-list\"].style.minHeight = `${window.innerHeight -\n          396}px`;\n      }\n    },\n    infiniteHandler($state) {\n      //infinite-loading handler\n      this.isloading = true;\n      this.$axios\n        .get(\n          `token/transactions?tokenId=${this.$config.tokenId}&address=${this.address}&direction=${this.lastType}&startIndex=${this.lastKey}`,\n          { timeout: 60000 }\n        )\n        .then(res => {\n          if (res.data && res.data.result.Count) {\n            this.records = this.records.concat(res.data.result.Items);\n            if (res.data.result.LastEvaluatedKey) {\n              this.lastKey = res.data.result.LastEvaluatedKey;\n              $state.loaded();\n            } else {\n              this.lastKey = \"\";\n              $state.loaded();\n              $state.complete();\n            }\n          } else {\n            $state.complete();\n          }\n        })\n        .catch(err => {\n          if (err.response && err.response.status === 400) {\n            $state.complete();\n          }\n        })\n        .finally(() => {\n          this.isloading = false;\n        });\n    },\n    async requestData() {\n      try {\n        //request TOKEN info\n        this.$store.dispatch(\"update_token\", this.$config.tokenId);\n        this.requestBalance();\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    refreshData() {\n      //when refresh data, reload the infinite-loading component and reset the timer\n      if (this.isloading) return;\n      this.infiniteReload();\n      clearTimeout(this.timer);\n      this.timer = setTimeout(this.refreshTimer, 200000);\n    },\n    infiniteReload() {\n      //refresh token, balance and records\n      this.$store.dispatch(\"update_token\", this.$config.tokenId);\n      this.requestBalance();\n      this.records = [];\n      this.lastKey = \"\";\n      //change infiniteId to reload infinite-loading component\n      this.infiniteId += 1;\n    },\n    requestBalance() {\n      this.$store.dispatch(\"update_balance\", {\n        index: this.currentIndex,\n        tokenId: this.$config.tokenId\n      });\n    },\n    routerTransaction(type) {\n      this.$router.replace({\n        path: \"/home/\" + type\n      });\n    },\n    // store in window.localStorage\n    storeAlias() {\n      this.editingAddress = !this.editingAddress;\n      let alias = JSON.parse(window.localStorage[\"alias\"]);\n      let index = this.currentIndex;\n      if (this.alias.length <= 15) {\n        alias[index] = this.alias;\n        window.localStorage[\"alias\"] = JSON.stringify(alias);\n        this.$store.commit(\"update_wallet\", {\n          index: index,\n          alias: alias[index]\n        });\n      } else {\n        // alert(`Sorry! The name you wrote can't more than 15 character`);\n        this.alias = alias[index];\n      }\n    },\n    // scan qrcode\n    exitCamera() {\n      this.scanOverlay = !this.scanOverlay;\n      this.scanOverlay1 = !this.scanOverlay1;\n      this.openCamera = \"off\";\n    },\n    async onQrImportInit(promise) {\n      try {\n        this.qrImportInit = true;\n        await promise;\n        this.scanOverlay1 = true;\n      } catch (error) {\n        this.scanOverlay = false;\n        if (error.name === \"NotAllowedError\") {\n          alert(\"Please allow camera access permission\");\n        } else if (error.name === \"NotFoundError\") {\n          alert(\"No suitable camera device installed\");\n        } else if (error.name === \"NotSupportedError\") {\n          alert(\"Page is not served over HTTPS (or localhost)\");\n        } else if (error.name === \"NotReadableError\") {\n          alert(\"Maybe camera is already in use\");\n        } else if (error.name === \"OverconstarinedError\") {\n          alert(\"Pass constraints do not match any camera\");\n        } else {\n          alert(error);\n        }\n      } finally {\n        this.qrImportInit = false;\n      }\n    },\n    onQrDecode(decodeString) {\n      try {\n        console.log(decodeString);\n        if (!decodeString) return;\n        let receiveAddress = JSON.parse(decodeString);\n        console.log(receiveAddress);\n        if (\n          crypto.isValidAddress(receiveAddress.address, this.$config.NET_BYTE)\n        ) {\n          this.$store.commit(\"update_sendInfo\", {\n            recipient: receiveAddress.address,\n            amount: receiveAddress.amount,\n            description: receiveAddress.description\n          });\n          this.$router.replace({ path: \"/home/send\" });\n        }\n      } catch (err) {\n        console.error(err);\n        // alert(\"The qr code you scanned is illegal in the site\");\n        this.qrSignCamera = \"auto\";\n      }\n    }\n  },\n\n  components: {\n    InfiniteLoading,\n    TimeAgo,\n    QrcodeStream,\n    scanQrStyle\n  }\n};\n",null]}