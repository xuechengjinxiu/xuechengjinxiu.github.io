{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VNavigationDrawer/VNavigationDrawer.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VNavigationDrawer/VNavigationDrawer.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.fixed\";\nimport _defineProperty from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Styles\nimport \"../../../src/components/VNavigationDrawer/VNavigationDrawer.sass\"; // Components\n\nimport VImg from \"../VImg/VImg\"; // Mixins\n\nimport Applicationable from \"../../mixins/applicationable\";\nimport Colorable from \"../../mixins/colorable\";\nimport Dependent from \"../../mixins/dependent\";\nimport Overlayable from \"../../mixins/overlayable\";\nimport SSRBootable from \"../../mixins/ssr-bootable\";\nimport Themeable from \"../../mixins/themeable\"; // Directives\n\nimport ClickOutside from \"../../directives/click-outside\";\nimport Resize from \"../../directives/resize\";\nimport Touch from \"../../directives/touch\"; // Utilities\n\nimport { convertToUnit, getSlot } from \"../../util/helpers\";\nimport mixins from \"../../util/mixins\";\nvar baseMixins = mixins(Applicationable('left', ['isActive', 'isMobile', 'miniVariant', 'expandOnHover', 'permanent', 'right', 'temporary', 'width']), Colorable, Dependent, Overlayable, SSRBootable, Themeable);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'v-navigation-drawer',\n  provide: function provide() {\n    return {\n      isInNav: this.tag === 'nav'\n    };\n  },\n  directives: {\n    ClickOutside: ClickOutside,\n    Resize: Resize,\n    Touch: Touch\n  },\n  props: {\n    bottom: Boolean,\n    clipped: Boolean,\n    disableResizeWatcher: Boolean,\n    disableRouteWatcher: Boolean,\n    expandOnHover: Boolean,\n    floating: Boolean,\n    height: {\n      type: [Number, String],\n      default: function _default() {\n        return this.app ? '100vh' : '100%';\n      }\n    },\n    miniVariant: Boolean,\n    miniVariantWidth: {\n      type: [Number, String],\n      default: 80\n    },\n    mobileBreakPoint: {\n      type: [Number, String],\n      default: 1264\n    },\n    permanent: Boolean,\n    right: Boolean,\n    src: {\n      type: [String, Object],\n      default: ''\n    },\n    stateless: Boolean,\n    tag: {\n      type: String,\n      default: function _default() {\n        return this.app ? 'nav' : 'aside';\n      }\n    },\n    temporary: Boolean,\n    touchless: Boolean,\n    width: {\n      type: [Number, String],\n      default: 256\n    },\n    value: {\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      isMouseover: false,\n      touchArea: {\n        left: 0,\n        right: 0\n      },\n      stackMinZIndex: 6\n    };\n  },\n  computed: {\n    /**\n     * Used for setting an app value from a dynamic\n     * property. Called from applicationable.js\n     */\n    applicationProperty: function applicationProperty() {\n      return this.right ? 'right' : 'left';\n    },\n    classes: function classes() {\n      return _objectSpread({\n        'v-navigation-drawer': true,\n        'v-navigation-drawer--absolute': this.absolute,\n        'v-navigation-drawer--bottom': this.bottom,\n        'v-navigation-drawer--clipped': this.clipped,\n        'v-navigation-drawer--close': !this.isActive,\n        'v-navigation-drawer--fixed': !this.absolute && (this.app || this.fixed),\n        'v-navigation-drawer--floating': this.floating,\n        'v-navigation-drawer--is-mobile': this.isMobile,\n        'v-navigation-drawer--is-mouseover': this.isMouseover,\n        'v-navigation-drawer--mini-variant': this.miniVariant || this.expandOnHover && !this.isMouseover,\n        'v-navigation-drawer--open': this.isActive,\n        'v-navigation-drawer--open-on-hover': this.expandOnHover,\n        'v-navigation-drawer--right': this.right,\n        'v-navigation-drawer--temporary': this.temporary\n      }, this.themeClasses);\n    },\n    computedMaxHeight: function computedMaxHeight() {\n      if (!this.hasApp) return null;\n      var computedMaxHeight = this.$vuetify.application.bottom + this.$vuetify.application.footer + this.$vuetify.application.bar;\n      if (!this.clipped) return computedMaxHeight;\n      return computedMaxHeight + this.$vuetify.application.top;\n    },\n    computedTop: function computedTop() {\n      if (!this.hasApp) return 0;\n      var computedTop = this.$vuetify.application.bar;\n      computedTop += this.clipped ? this.$vuetify.application.top : 0;\n      return computedTop;\n    },\n    computedTransform: function computedTransform() {\n      if (this.isActive) return 0;\n      if (this.isBottom) return 100;\n      return this.right ? 100 : -100;\n    },\n    computedWidth: function computedWidth() {\n      if (this.expandOnHover && !this.isMouseover || this.miniVariant) return this.miniVariantWidth;\n      return this.width;\n    },\n    hasApp: function hasApp() {\n      return this.app && !this.isMobile && !this.temporary;\n    },\n    isBottom: function isBottom() {\n      return this.bottom && this.isMobile;\n    },\n    isMobile: function isMobile() {\n      return !this.stateless && !this.permanent && this.$vuetify.breakpoint.width < parseInt(this.mobileBreakPoint, 10);\n    },\n    reactsToClick: function reactsToClick() {\n      return !this.stateless && !this.permanent && (this.isMobile || this.temporary);\n    },\n    reactsToMobile: function reactsToMobile() {\n      return this.app && !this.disableResizeWatcher && !this.permanent && !this.stateless && !this.temporary;\n    },\n    reactsToResize: function reactsToResize() {\n      return !this.disableResizeWatcher && !this.stateless;\n    },\n    reactsToRoute: function reactsToRoute() {\n      return !this.disableRouteWatcher && !this.stateless && (this.temporary || this.isMobile);\n    },\n    showOverlay: function showOverlay() {\n      return this.isActive && (this.isMobile || this.temporary);\n    },\n    styles: function styles() {\n      var translate = this.isBottom ? 'translateY' : 'translateX';\n      var styles = {\n        height: convertToUnit(this.height),\n        top: !this.isBottom ? convertToUnit(this.computedTop) : 'auto',\n        maxHeight: this.computedMaxHeight != null ? \"calc(100% - \".concat(convertToUnit(this.computedMaxHeight), \")\") : undefined,\n        transform: \"\".concat(translate, \"(\").concat(convertToUnit(this.computedTransform, '%'), \")\"),\n        width: convertToUnit(this.computedWidth)\n      };\n      return styles;\n    }\n  },\n  watch: {\n    $route: 'onRouteChange',\n    isActive: function isActive(val) {\n      this.$emit('input', val);\n    },\n\n    /**\n     * When mobile changes, adjust the active state\n     * only when there has been a previous value\n     */\n    isMobile: function isMobile(val, prev) {\n      !val && this.isActive && !this.temporary && this.removeOverlay();\n      if (prev == null || !this.reactsToResize || !this.reactsToMobile) return;\n      this.isActive = !val;\n    },\n    permanent: function permanent(val) {\n      // If enabling prop enable the drawer\n      if (val) this.isActive = true;\n    },\n    showOverlay: function showOverlay(val) {\n      if (val) this.genOverlay();else this.removeOverlay();\n    },\n    value: function value(val) {\n      if (this.permanent) return;\n\n      if (val == null) {\n        this.init();\n        return;\n      }\n\n      if (val !== this.isActive) this.isActive = val;\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.init();\n  },\n  methods: {\n    calculateTouchArea: function calculateTouchArea() {\n      var parent = this.$el.parentNode;\n      if (!parent) return;\n      var parentRect = parent.getBoundingClientRect();\n      this.touchArea = {\n        left: parentRect.left + 50,\n        right: parentRect.right - 50\n      };\n    },\n    closeConditional: function closeConditional() {\n      return this.isActive && !this._isDestroyed && this.reactsToClick;\n    },\n    genAppend: function genAppend() {\n      return this.genPosition('append');\n    },\n    genBackground: function genBackground() {\n      var props = {\n        height: '100%',\n        width: '100%',\n        src: this.src\n      };\n      var image = this.$scopedSlots.img ? this.$scopedSlots.img(props) : this.$createElement(VImg, {\n        props: props\n      });\n      return this.$createElement('div', {\n        staticClass: 'v-navigation-drawer__image'\n      }, [image]);\n    },\n    genDirectives: function genDirectives() {\n      var _this = this;\n\n      var directives = [{\n        name: 'click-outside',\n        value: function value() {\n          return _this.isActive = false;\n        },\n        args: {\n          closeConditional: this.closeConditional,\n          include: this.getOpenDependentElements\n        }\n      }];\n\n      if (!this.touchless && !this.stateless) {\n        directives.push({\n          name: 'touch',\n          value: {\n            parent: true,\n            left: this.swipeLeft,\n            right: this.swipeRight\n          }\n        });\n      }\n\n      return directives;\n    },\n    genListeners: function genListeners() {\n      var _this2 = this;\n\n      var on = {\n        transitionend: function transitionend(e) {\n          if (e.target !== e.currentTarget) return;\n\n          _this2.$emit('transitionend', e); // IE11 does not support new Event('resize')\n\n\n          var resizeEvent = document.createEvent('UIEvents');\n          resizeEvent.initUIEvent('resize', true, false, window, 0);\n          window.dispatchEvent(resizeEvent);\n        }\n      };\n\n      if (this.miniVariant) {\n        on.click = function () {\n          return _this2.$emit('update:mini-variant', false);\n        };\n      }\n\n      if (this.expandOnHover) {\n        on.mouseenter = function () {\n          return _this2.isMouseover = true;\n        };\n\n        on.mouseleave = function () {\n          return _this2.isMouseover = false;\n        };\n      }\n\n      return on;\n    },\n    genPosition: function genPosition(name) {\n      var slot = getSlot(this, name);\n      if (!slot) return slot;\n      return this.$createElement('div', {\n        staticClass: \"v-navigation-drawer__\".concat(name)\n      }, slot);\n    },\n    genPrepend: function genPrepend() {\n      return this.genPosition('prepend');\n    },\n    genContent: function genContent() {\n      return this.$createElement('div', {\n        staticClass: 'v-navigation-drawer__content'\n      }, this.$slots.default);\n    },\n    genBorder: function genBorder() {\n      return this.$createElement('div', {\n        staticClass: 'v-navigation-drawer__border'\n      });\n    },\n    init: function init() {\n      if (this.permanent) {\n        this.isActive = true;\n      } else if (this.stateless || this.value != null) {\n        this.isActive = this.value;\n      } else if (!this.temporary) {\n        this.isActive = !this.isMobile;\n      }\n    },\n    onRouteChange: function onRouteChange() {\n      if (this.reactsToRoute && this.closeConditional()) {\n        this.isActive = false;\n      }\n    },\n    swipeLeft: function swipeLeft(e) {\n      if (this.isActive && this.right) return;\n      this.calculateTouchArea();\n      if (Math.abs(e.touchendX - e.touchstartX) < 100) return;\n      if (this.right && e.touchstartX >= this.touchArea.right) this.isActive = true;else if (!this.right && this.isActive) this.isActive = false;\n    },\n    swipeRight: function swipeRight(e) {\n      if (this.isActive && !this.right) return;\n      this.calculateTouchArea();\n      if (Math.abs(e.touchendX - e.touchstartX) < 100) return;\n      if (!this.right && e.touchstartX <= this.touchArea.left) this.isActive = true;else if (this.right && this.isActive) this.isActive = false;\n    },\n\n    /**\n     * Update the application layout\n     */\n    updateApplication: function updateApplication() {\n      if (!this.isActive || this.isMobile || this.temporary || !this.$el) return 0;\n      var width = Number(this.computedWidth);\n      return isNaN(width) ? this.$el.clientWidth : width;\n    }\n  },\n  render: function render(h) {\n    var children = [this.genPrepend(), this.genContent(), this.genAppend(), this.genBorder()];\n    if (this.src || getSlot(this, 'img')) children.unshift(this.genBackground());\n    return h(this.tag, this.setBackgroundColor(this.color, {\n      class: this.classes,\n      style: this.styles,\n      directives: this.genDirectives(),\n      on: this.genListeners()\n    }), children);\n  }\n});",null]}