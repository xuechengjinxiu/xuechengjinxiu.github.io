{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js??ref--13-0!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/transaction.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/transaction.js","mtime":1585119550000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport Base58 from \"base-58\";\nimport ByteProcessor from \"./byte-processor\";\nimport Crypto from \"./crypto\";\nimport Concat from \"./concat\";\nimport * as constants from \"../constants\";\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nvar TOKEN_TRANSFER_ADDRESS_TYPE = 2;\nvar TOKEN_TRANSFER_AMOUNT_TYPE = 3; // Fields of the original data object\n\nvar paymentField = {\n  timestamp: new ByteProcessor.Long(\"timestamp\"),\n  amount: new ByteProcessor.Long(\"amount\"),\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  recipient: new ByteProcessor.Recipient(\"recipient\"),\n  attachment: new ByteProcessor.Attachment(\"attachment\")\n};\nvar leaseField = {\n  recipient: new ByteProcessor.Recipient(\"recipient\"),\n  amount: new ByteProcessor.Long(\"amount\"),\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  timestamp: new ByteProcessor.Long(\"timestamp\")\n};\nvar cancelLeasingField = {\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  timestamp: new ByteProcessor.Long(\"timestamp\"),\n  txId: new ByteProcessor.Base58(\"transactionId\")\n};\nvar contractExecFeild = {\n  contractId: new ByteProcessor.Base58(\"contractId\"),\n  functionIndex: new ByteProcessor.Short(\"functionIndex\"),\n  functionData: new ByteProcessor.FunctionData(\"functionData\"),\n  attachment: new ByteProcessor.Attachment(\"attachment\"),\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  timestamp: new ByteProcessor.Long(\"timestamp\")\n};\nvar storedFields = {};\n\nfunction getFields(type) {\n  switch (type) {\n    case constants.TRANSACTION_TYPE.PAYMENT_TX:\n      storedFields = paymentField;\n      break;\n\n    case constants.TRANSACTION_TYPE.LEASE_TX:\n      storedFields = leaseField;\n      break;\n\n    case constants.TRANSACTION_TYPE.CANCEL_LEASE_TX:\n      storedFields = cancelLeasingField;\n      break;\n\n    case constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX:\n      storedFields = contractExecFeild;\n      break;\n  }\n}\n\nfunction makeByteProviders(tx_type) {\n  var byteProviders = [];\n  byteProviders.push(Uint8Array.from([tx_type]));\n\n  var _loop = function _loop(name) {\n    if (storedFields[name] instanceof ByteProcessor.ByteProcessor) {\n      // All user data must be represented as bytes\n      byteProviders.push(function (data) {\n        return storedFields[name].process(data[name]);\n      });\n    } else {\n      throw new Error(\"Invalid field is passed to the createTransactionClass function\");\n    }\n  };\n\n  for (var name in storedFields) {\n    _loop(name);\n  }\n\n  return byteProviders;\n}\n\nvar userData; // Save all needed values from user data\n\nfunction getData(transferData) {\n  userData = {};\n  userData = Object.keys(storedFields).reduce(function (store, key) {\n    store[key] = transferData[key];\n    return store;\n  }, {});\n}\n\nfunction getBytes(transferData, tx_type) {\n  var byteProviders = makeByteProviders(tx_type);\n\n  if (transferData === void 0) {\n    transferData = {};\n  } // Save all needed values from user data\n\n\n  getData(transferData);\n\n  var _dataHolders = byteProviders.map(function (provider) {\n    if (typeof provider === \"function\") {\n      return provider(userData);\n    } else {\n      return provider;\n    }\n  });\n\n  return Concat.concatUint8Arrays.apply(void 0, _dataHolders);\n}\n\nfunction getExactBytes(fieldName) {\n  if (!(fieldName in storedFields)) {\n    throw new Error(\"There is no field '\" + fieldName + \"' in transfer transaction\");\n  }\n\n  return storedFields[fieldName].process(userData[fieldName]);\n}\n\nfunction getSignature(transferData, keyPair, tx_type) {\n  return Crypto.buildTransactionSignature(getBytes(__assign({}, transferData), tx_type), keyPair.privateKey);\n}\n\nfunction transformAttachment() {\n  return Base58.encode(Uint8Array.from(Array.prototype.slice.call(getExactBytes(\"attachment\"), 2)));\n}\n\nfunction castToAPISchema(data, tx_type) {\n  var apiSchema = data;\n\n  if (tx_type === constants.TRANSACTION_TYPE.PAYMENT_TX || tx_type === constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX) {\n    __assign(apiSchema, {\n      attachment: transformAttachment()\n    });\n  }\n\n  if (tx_type !== constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX) {\n    __assign(apiSchema, {\n      recipient: userData[\"recipient\"]\n    });\n  }\n\n  return apiSchema;\n}\n\nvar Transaction = {\n  toBytes: function toBytes(transferData, tx_type) {\n    getFields(tx_type);\n    return getBytes(__assign(tx_type ? {\n      transactionType: tx_type\n    } : {}, transferData), tx_type);\n  },\n  prepareTokenSendFuncDataStr: function prepareTokenSendFuncDataStr(recipient, amount) {\n    var recipientBytes = Concat.concatUint8Arrays(Uint8Array.from([TOKEN_TRANSFER_ADDRESS_TYPE]), new ByteProcessor.Recipient(\"recipient\").process(recipient));\n    var amoutBytes = Concat.concatUint8Arrays(Uint8Array.from([TOKEN_TRANSFER_AMOUNT_TYPE]), new ByteProcessor.Long(\"amount\").process(amount));\n    var parameterCountBytes = new ByteProcessor.Short(\"paramCount\").process(2);\n    return Base58.encode(Concat.concatUint8Arrays(parameterCountBytes, recipientBytes, amoutBytes));\n  },\n  prepareForAPI: function prepareForAPI(transferData, keyPair, tx_type) {\n    getFields(tx_type);\n    var signature = getSignature(transferData, keyPair, tx_type);\n    return __assign({}, tx_type ? {\n      transactionType: tx_type\n    } : {}, {\n      senderPublicKey: keyPair.publicKey\n    }, castToAPISchema(userData, tx_type), {\n      signature: signature\n    });\n  },\n  isValidSignature: function isValidSignature(data, signature, publicKey, tx_type) {\n    getFields(tx_type);\n    return Crypto.isValidTransactionSignature(getBytes(data, tx_type), signature, publicKey);\n  },\n  prepareColdForAPI: function prepareColdForAPI(transferData, signature, publicKey, tx_type) {\n    getFields(tx_type);\n    getData(transferData);\n    return __assign({}, tx_type ? {\n      transactionType: tx_type\n    } : {}, {\n      senderPublicKey: publicKey\n    }, castToAPISchema(userData, tx_type), {\n      signature: signature\n    });\n  },\n  prepareColdAttachment: function prepareColdAttachment(utf8Text) {\n    return Base58.encode(Uint8Array.from(Array.prototype.slice.call(new ByteProcessor.Attachment(\"attachment\").process(utf8Text), 2)));\n  },\n  tokenIdToContractId: function tokenIdToContractId(tokenId) {\n    var tokenIdBytes = Base58.decode(tokenId);\n    var encodeBytes = Concat.concatUint8Arrays(Uint8Array.from([6]), Uint8Array.from(tokenIdBytes.slice(1, tokenIdBytes.length - 8)));\n    var checkBytes = Uint8Array.from(Crypto.hash(encodeBytes).slice(0, 4));\n    return Base58.encode(Concat.concatUint8Arrays(encodeBytes, checkBytes));\n  },\n  contractIDToTokenID: function contractIDToTokenID(contractId) {\n    var contractIdBytes = Base58.decode(contractId);\n    var encodeBytes = Concat.concatUint8Arrays(Uint8Array.from([132]), Uint8Array.from(contractIdBytes.slice(1, contractIdBytes.length - 4)), new ByteProcessor.Index(\"contractId\").process(0));\n    var checkBytes = Uint8Array.from(Crypto.hash(encodeBytes).slice(0, 4));\n    return Base58.encode(Concat.concatUint8Arrays(encodeBytes, checkBytes));\n  }\n};\nexport default Transaction;",{"version":3,"sources":["/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/transaction.js"],"names":["Base58","ByteProcessor","Crypto","Concat","constants","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","TOKEN_TRANSFER_ADDRESS_TYPE","TOKEN_TRANSFER_AMOUNT_TYPE","paymentField","timestamp","Long","amount","fee","feeScale","Short","recipient","Recipient","attachment","Attachment","leaseField","cancelLeasingField","txId","contractExecFeild","contractId","functionIndex","functionData","FunctionData","storedFields","getFields","type","TRANSACTION_TYPE","PAYMENT_TX","LEASE_TX","CANCEL_LEASE_TX","CONTRACT_EXEC_TX","makeByteProviders","tx_type","byteProviders","push","Uint8Array","from","name","data","process","Error","userData","getData","transferData","keys","reduce","store","key","getBytes","_dataHolders","map","provider","concatUint8Arrays","apply","getExactBytes","fieldName","getSignature","keyPair","buildTransactionSignature","privateKey","transformAttachment","encode","Array","slice","castToAPISchema","apiSchema","Transaction","toBytes","transactionType","prepareTokenSendFuncDataStr","recipientBytes","amoutBytes","parameterCountBytes","prepareForAPI","signature","senderPublicKey","publicKey","isValidSignature","isValidTransactionSignature","prepareColdForAPI","prepareColdAttachment","utf8Text","tokenIdToContractId","tokenId","tokenIdBytes","decode","encodeBytes","checkBytes","hash","contractIDToTokenID","contractIdBytes","Index"],"mappings":"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","sourcesContent":["import Base58 from \"base-58\";\nimport ByteProcessor from \"./byte-processor\";\nimport Crypto from \"./crypto\";\nimport Concat from \"./concat\";\nimport * as constants from \"../constants\";\n\nconst __assign =\n  (this && this.__assign) ||\n  Object.assign ||\n  function(t) {\n    for (let s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (let p in s)\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n\nconst TOKEN_TRANSFER_ADDRESS_TYPE = 2;\nconst TOKEN_TRANSFER_AMOUNT_TYPE = 3;\n// Fields of the original data object\nlet paymentField = {\n  timestamp: new ByteProcessor.Long(\"timestamp\"),\n  amount: new ByteProcessor.Long(\"amount\"),\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  recipient: new ByteProcessor.Recipient(\"recipient\"),\n  attachment: new ByteProcessor.Attachment(\"attachment\")\n};\nlet leaseField = {\n  recipient: new ByteProcessor.Recipient(\"recipient\"),\n  amount: new ByteProcessor.Long(\"amount\"),\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  timestamp: new ByteProcessor.Long(\"timestamp\")\n};\nlet cancelLeasingField = {\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  timestamp: new ByteProcessor.Long(\"timestamp\"),\n  txId: new ByteProcessor.Base58(\"transactionId\")\n};\nlet contractExecFeild = {\n  contractId: new ByteProcessor.Base58(\"contractId\"),\n  functionIndex: new ByteProcessor.Short(\"functionIndex\"),\n  functionData: new ByteProcessor.FunctionData(\"functionData\"),\n  attachment: new ByteProcessor.Attachment(\"attachment\"),\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  timestamp: new ByteProcessor.Long(\"timestamp\")\n};\n\nlet storedFields = {};\n\nfunction getFields(type) {\n  switch (type) {\n    case constants.TRANSACTION_TYPE.PAYMENT_TX:\n      storedFields = paymentField;\n      break;\n    case constants.TRANSACTION_TYPE.LEASE_TX:\n      storedFields = leaseField;\n      break;\n    case constants.TRANSACTION_TYPE.CANCEL_LEASE_TX:\n      storedFields = cancelLeasingField;\n      break;\n    case constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX:\n      storedFields = contractExecFeild;\n      break;\n  }\n}\n\nfunction makeByteProviders(tx_type) {\n  let byteProviders = [];\n  byteProviders.push(Uint8Array.from([tx_type]));\n  for (let name in storedFields) {\n    if (storedFields[name] instanceof ByteProcessor.ByteProcessor) {\n      // All user data must be represented as bytes\n      byteProviders.push(function(data) {\n        return storedFields[name].process(data[name]);\n      });\n    } else {\n      throw new Error(\n        \"Invalid field is passed to the createTransactionClass function\"\n      );\n    }\n  }\n  return byteProviders;\n}\n\nlet userData;\n// Save all needed values from user data\nfunction getData(transferData) {\n  userData = {};\n  userData = Object.keys(storedFields).reduce(function(store, key) {\n    store[key] = transferData[key];\n    return store;\n  }, {});\n}\n\nfunction getBytes(transferData, tx_type) {\n  let byteProviders = makeByteProviders(tx_type);\n  if (transferData === void 0) {\n    transferData = {};\n  }\n  // Save all needed values from user data\n  getData(transferData);\n  let _dataHolders = byteProviders.map(function(provider) {\n    if (typeof provider === \"function\") {\n      return provider(userData);\n    } else {\n      return provider;\n    }\n  });\n  return Concat.concatUint8Arrays.apply(void 0, _dataHolders);\n}\n\nfunction getExactBytes(fieldName) {\n  if (!(fieldName in storedFields)) {\n    throw new Error(\n      \"There is no field '\" + fieldName + \"' in transfer transaction\"\n    );\n  }\n  return storedFields[fieldName].process(userData[fieldName]);\n}\n\nfunction getSignature(transferData, keyPair, tx_type) {\n  return Crypto.buildTransactionSignature(\n    getBytes(__assign({}, transferData), tx_type),\n    keyPair.privateKey\n  );\n}\n\nfunction transformAttachment() {\n  return Base58.encode(\n    Uint8Array.from(Array.prototype.slice.call(getExactBytes(\"attachment\"), 2))\n  );\n}\n\nfunction castToAPISchema(data, tx_type) {\n  let apiSchema = data;\n\n  if (\n    tx_type === constants.TRANSACTION_TYPE.PAYMENT_TX ||\n    tx_type === constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX\n  ) {\n    __assign(apiSchema, { attachment: transformAttachment() });\n  }\n  if (tx_type !== constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX) {\n    __assign(apiSchema, { recipient: userData[\"recipient\"] });\n  }\n  return apiSchema;\n}\n\nconst Transaction = {\n  toBytes: function(transferData, tx_type) {\n    getFields(tx_type);\n    return getBytes(\n      __assign(tx_type ? { transactionType: tx_type } : {}, transferData),\n      tx_type\n    );\n  },\n  prepareTokenSendFuncDataStr: function(recipient, amount) {\n    let recipientBytes = Concat.concatUint8Arrays(\n      Uint8Array.from([TOKEN_TRANSFER_ADDRESS_TYPE]),\n      new ByteProcessor.Recipient(\"recipient\").process(recipient)\n    );\n    let amoutBytes = Concat.concatUint8Arrays(\n      Uint8Array.from([TOKEN_TRANSFER_AMOUNT_TYPE]),\n      new ByteProcessor.Long(\"amount\").process(amount)\n    );\n    let parameterCountBytes = new ByteProcessor.Short(\"paramCount\").process(2);\n    return Base58.encode(\n      Concat.concatUint8Arrays(parameterCountBytes, recipientBytes, amoutBytes)\n    );\n  },\n  prepareForAPI: function(transferData, keyPair, tx_type) {\n    getFields(tx_type);\n    let signature = getSignature(transferData, keyPair, tx_type);\n    return __assign(\n      {},\n      tx_type ? { transactionType: tx_type } : {},\n      { senderPublicKey: keyPair.publicKey },\n      castToAPISchema(userData, tx_type),\n      { signature: signature }\n    );\n  },\n  isValidSignature: function(data, signature, publicKey, tx_type) {\n    getFields(tx_type);\n    return Crypto.isValidTransactionSignature(\n      getBytes(data, tx_type),\n      signature,\n      publicKey\n    );\n  },\n  prepareColdForAPI: function(transferData, signature, publicKey, tx_type) {\n    getFields(tx_type);\n    getData(transferData);\n    return __assign(\n      {},\n      tx_type ? { transactionType: tx_type } : {},\n      { senderPublicKey: publicKey },\n      castToAPISchema(userData, tx_type),\n      { signature: signature }\n    );\n  },\n\n  prepareColdAttachment: function(utf8Text) {\n    return Base58.encode(\n      Uint8Array.from(\n        Array.prototype.slice.call(\n          new ByteProcessor.Attachment(\"attachment\").process(utf8Text),\n          2\n        )\n      )\n    );\n  },\n\n  tokenIdToContractId: function(tokenId) {\n    let tokenIdBytes = Base58.decode(tokenId);\n    let encodeBytes = Concat.concatUint8Arrays(\n      Uint8Array.from([6]),\n      Uint8Array.from(tokenIdBytes.slice(1, tokenIdBytes.length - 8))\n    );\n    let checkBytes = Uint8Array.from(Crypto.hash(encodeBytes).slice(0, 4));\n    return Base58.encode(Concat.concatUint8Arrays(encodeBytes, checkBytes));\n  },\n\n  contractIDToTokenID(contractId) {\n    let contractIdBytes = Base58.decode(contractId);\n    let encodeBytes = Concat.concatUint8Arrays(\n      Uint8Array.from([132]),\n      Uint8Array.from(contractIdBytes.slice(1, contractIdBytes.length - 4)),\n      new ByteProcessor.Index(\"contractId\").process(0)\n    );\n    let checkBytes = Uint8Array.from(Crypto.hash(encodeBytes).slice(0, 4));\n    return Base58.encode(Concat.concatUint8Arrays(encodeBytes, checkBytes));\n  }\n};\n\nexport default Transaction;\n"]}]}