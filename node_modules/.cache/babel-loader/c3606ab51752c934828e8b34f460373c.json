{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VDataTable/VVirtualTable.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VDataTable/VVirtualTable.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"../../../src/components/VDataTable/VVirtualTable.sass\"; // Components\n\nimport VSimpleTable from './VSimpleTable';\nimport mixins from '../../util/mixins'; // Utiltiies\n\nimport { convertToUnit, debounce } from '../../util/helpers'; // Types\n\nconst baseMixins = mixins(VSimpleTable);\nexport default baseMixins.extend().extend({\n  name: 'v-virtual-table',\n  props: {\n    chunkSize: {\n      type: Number,\n      default: 25\n    },\n    headerHeight: {\n      type: Number,\n      default: 48\n    },\n    items: {\n      type: Array,\n      default: () => []\n    },\n    rowHeight: {\n      type: Number,\n      default: 48\n    }\n  },\n  data: () => ({\n    scrollTop: 0,\n    oldChunk: 0,\n    scrollDebounce: null,\n    invalidateCache: false\n  }),\n  computed: {\n    itemsLength() {\n      return this.items.length;\n    },\n\n    totalHeight() {\n      return this.itemsLength * this.rowHeight + this.headerHeight;\n    },\n\n    topIndex() {\n      return Math.floor(this.scrollTop / this.rowHeight);\n    },\n\n    chunkIndex() {\n      return Math.floor(this.topIndex / this.chunkSize);\n    },\n\n    startIndex() {\n      return Math.max(0, this.chunkIndex * this.chunkSize - this.chunkSize);\n    },\n\n    offsetTop() {\n      return Math.max(0, this.startIndex * this.rowHeight);\n    },\n\n    stopIndex() {\n      return Math.min(this.startIndex + this.chunkSize * 3, this.itemsLength);\n    },\n\n    offsetBottom() {\n      return Math.max(0, (this.itemsLength - this.stopIndex - this.startIndex) * this.rowHeight);\n    }\n\n  },\n  watch: {\n    chunkIndex(newValue, oldValue) {\n      this.oldChunk = oldValue;\n    },\n\n    items() {\n      this.cachedItems = null;\n      this.$refs.table.scrollTop = 0;\n    }\n\n  },\n\n  created() {\n    this.cachedItems = null;\n  },\n\n  mounted() {\n    this.scrollDebounce = debounce(this.onScroll, 50);\n    this.$refs.table.addEventListener('scroll', this.scrollDebounce, {\n      passive: true\n    });\n  },\n\n  beforeDestroy() {\n    this.$refs.table.removeEventListener('scroll', this.scrollDebounce);\n  },\n\n  methods: {\n    createStyleHeight(height) {\n      return {\n        height: `${height}px`\n      };\n    },\n\n    genBody() {\n      if (this.cachedItems === null || this.chunkIndex !== this.oldChunk) {\n        this.cachedItems = this.genItems();\n        this.oldChunk = this.chunkIndex;\n      }\n\n      return this.$createElement('tbody', [this.$createElement('tr', {\n        style: this.createStyleHeight(this.offsetTop)\n      }), this.cachedItems, this.$createElement('tr', {\n        style: this.createStyleHeight(this.offsetBottom)\n      })]);\n    },\n\n    genItems() {\n      return this.$scopedSlots.items({\n        items: this.items.slice(this.startIndex, this.stopIndex)\n      });\n    },\n\n    onScroll(e) {\n      const target = e.target;\n      this.scrollTop = target.scrollTop;\n    },\n\n    genTable() {\n      return this.$createElement('div', {\n        ref: 'table',\n        staticClass: 'v-virtual-table__table'\n      }, [this.$createElement('table', [this.$slots['body.before'], this.genBody(), this.$slots['body.after']])]);\n    },\n\n    genWrapper() {\n      return this.$createElement('div', {\n        staticClass: 'v-virtual-table__wrapper',\n        style: {\n          height: convertToUnit(this.height)\n        }\n      }, [this.genTable()]);\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-data-table v-virtual-table',\n      class: this.classes\n    }, [this.$slots.top, this.genWrapper(), this.$slots.bottom]);\n  }\n\n});",null]}