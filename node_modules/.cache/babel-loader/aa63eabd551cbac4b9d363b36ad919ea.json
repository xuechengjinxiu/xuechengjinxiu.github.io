{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js??ref--13-0!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/transaction.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/transaction.js","mtime":1585119550000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport Base58 from \"base-58\";\nimport ByteProcessor from \"./byte-processor\";\nimport Crypto from \"./crypto\";\nimport Concat from \"./concat\";\nimport * as constants from \"../constants\";\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nvar TOKEN_TRANSFER_ADDRESS_TYPE = 2;\nvar TOKEN_TRANSFER_AMOUNT_TYPE = 3; // Fields of the original data object\n\nvar paymentField = {\n  timestamp: new ByteProcessor.Long(\"timestamp\"),\n  amount: new ByteProcessor.Long(\"amount\"),\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  recipient: new ByteProcessor.Recipient(\"recipient\"),\n  attachment: new ByteProcessor.Attachment(\"attachment\")\n};\nvar leaseField = {\n  recipient: new ByteProcessor.Recipient(\"recipient\"),\n  amount: new ByteProcessor.Long(\"amount\"),\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  timestamp: new ByteProcessor.Long(\"timestamp\")\n};\nvar cancelLeasingField = {\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  timestamp: new ByteProcessor.Long(\"timestamp\"),\n  txId: new ByteProcessor.Base58(\"transactionId\")\n};\nvar contractExecFeild = {\n  contractId: new ByteProcessor.Base58(\"contractId\"),\n  functionIndex: new ByteProcessor.Short(\"functionIndex\"),\n  functionData: new ByteProcessor.FunctionData(\"functionData\"),\n  attachment: new ByteProcessor.Attachment(\"attachment\"),\n  fee: new ByteProcessor.Long(\"fee\"),\n  feeScale: new ByteProcessor.Short(\"feeScale\"),\n  timestamp: new ByteProcessor.Long(\"timestamp\")\n};\nvar storedFields = {};\n\nfunction getFields(type) {\n  switch (type) {\n    case constants.TRANSACTION_TYPE.PAYMENT_TX:\n      storedFields = paymentField;\n      break;\n\n    case constants.TRANSACTION_TYPE.LEASE_TX:\n      storedFields = leaseField;\n      break;\n\n    case constants.TRANSACTION_TYPE.CANCEL_LEASE_TX:\n      storedFields = cancelLeasingField;\n      break;\n\n    case constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX:\n      storedFields = contractExecFeild;\n      break;\n  }\n}\n\nfunction makeByteProviders(tx_type) {\n  var byteProviders = [];\n  byteProviders.push(Uint8Array.from([tx_type]));\n\n  var _loop = function _loop(name) {\n    if (storedFields[name] instanceof ByteProcessor.ByteProcessor) {\n      // All user data must be represented as bytes\n      byteProviders.push(function (data) {\n        return storedFields[name].process(data[name]);\n      });\n    } else {\n      throw new Error(\"Invalid field is passed to the createTransactionClass function\");\n    }\n  };\n\n  for (var name in storedFields) {\n    _loop(name);\n  }\n\n  return byteProviders;\n}\n\nvar userData; // Save all needed values from user data\n\nfunction getData(transferData) {\n  userData = {};\n  userData = Object.keys(storedFields).reduce(function (store, key) {\n    store[key] = transferData[key];\n    return store;\n  }, {});\n}\n\nfunction getBytes(transferData, tx_type) {\n  var byteProviders = makeByteProviders(tx_type);\n\n  if (transferData === void 0) {\n    transferData = {};\n  } // Save all needed values from user data\n\n\n  getData(transferData);\n\n  var _dataHolders = byteProviders.map(function (provider) {\n    if (typeof provider === \"function\") {\n      return provider(userData);\n    } else {\n      return provider;\n    }\n  });\n\n  return Concat.concatUint8Arrays.apply(void 0, _dataHolders);\n}\n\nfunction getExactBytes(fieldName) {\n  if (!(fieldName in storedFields)) {\n    throw new Error(\"There is no field '\" + fieldName + \"' in transfer transaction\");\n  }\n\n  return storedFields[fieldName].process(userData[fieldName]);\n}\n\nfunction getSignature(transferData, keyPair, tx_type) {\n  return Crypto.buildTransactionSignature(getBytes(__assign({}, transferData), tx_type), keyPair.privateKey);\n}\n\nfunction transformAttachment() {\n  return Base58.encode(Uint8Array.from(Array.prototype.slice.call(getExactBytes(\"attachment\"), 2)));\n}\n\nfunction castToAPISchema(data, tx_type) {\n  var apiSchema = data;\n\n  if (tx_type === constants.TRANSACTION_TYPE.PAYMENT_TX || tx_type === constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX) {\n    __assign(apiSchema, {\n      attachment: transformAttachment()\n    });\n  }\n\n  if (tx_type !== constants.TRANSACTION_TYPE.CONTRACT_EXEC_TX) {\n    __assign(apiSchema, {\n      recipient: userData[\"recipient\"]\n    });\n  }\n\n  return apiSchema;\n}\n\nvar Transaction = {\n  toBytes: function toBytes(transferData, tx_type) {\n    getFields(tx_type);\n    return getBytes(__assign(tx_type ? {\n      transactionType: tx_type\n    } : {}, transferData), tx_type);\n  },\n  prepareTokenSendFuncDataStr: function prepareTokenSendFuncDataStr(recipient, amount) {\n    var recipientBytes = Concat.concatUint8Arrays(Uint8Array.from([TOKEN_TRANSFER_ADDRESS_TYPE]), new ByteProcessor.Recipient(\"recipient\").process(recipient));\n    var amoutBytes = Concat.concatUint8Arrays(Uint8Array.from([TOKEN_TRANSFER_AMOUNT_TYPE]), new ByteProcessor.Long(\"amount\").process(amount));\n    var parameterCountBytes = new ByteProcessor.Short(\"paramCount\").process(2);\n    return Base58.encode(Concat.concatUint8Arrays(parameterCountBytes, recipientBytes, amoutBytes));\n  },\n  prepareForAPI: function prepareForAPI(transferData, keyPair, tx_type) {\n    getFields(tx_type);\n    var signature = getSignature(transferData, keyPair, tx_type);\n    return __assign({}, tx_type ? {\n      transactionType: tx_type\n    } : {}, {\n      senderPublicKey: keyPair.publicKey\n    }, castToAPISchema(userData, tx_type), {\n      signature: signature\n    });\n  },\n  isValidSignature: function isValidSignature(data, signature, publicKey, tx_type) {\n    getFields(tx_type);\n    return Crypto.isValidTransactionSignature(getBytes(data, tx_type), signature, publicKey);\n  },\n  prepareColdForAPI: function prepareColdForAPI(transferData, signature, publicKey, tx_type) {\n    getFields(tx_type);\n    getData(transferData);\n    return __assign({}, tx_type ? {\n      transactionType: tx_type\n    } : {}, {\n      senderPublicKey: publicKey\n    }, castToAPISchema(userData, tx_type), {\n      signature: signature\n    });\n  },\n  prepareColdAttachment: function prepareColdAttachment(utf8Text) {\n    return Base58.encode(Uint8Array.from(Array.prototype.slice.call(new ByteProcessor.Attachment(\"attachment\").process(utf8Text), 2)));\n  },\n  tokenIdToContractId: function tokenIdToContractId(tokenId) {\n    var tokenIdBytes = Base58.decode(tokenId);\n    var encodeBytes = Concat.concatUint8Arrays(Uint8Array.from([6]), Uint8Array.from(tokenIdBytes.slice(1, tokenIdBytes.length - 8)));\n    var checkBytes = Uint8Array.from(Crypto.hash(encodeBytes).slice(0, 4));\n    return Base58.encode(Concat.concatUint8Arrays(encodeBytes, checkBytes));\n  },\n  contractIDToTokenID: function contractIDToTokenID(contractId) {\n    var contractIdBytes = Base58.decode(contractId);\n    var encodeBytes = Concat.concatUint8Arrays(Uint8Array.from([132]), Uint8Array.from(contractIdBytes.slice(1, contractIdBytes.length - 4)), new ByteProcessor.Index(\"contractId\").process(0));\n    var checkBytes = Uint8Array.from(Crypto.hash(encodeBytes).slice(0, 4));\n    return Base58.encode(Concat.concatUint8Arrays(encodeBytes, checkBytes));\n  }\n};\nexport default Transaction;",null]}