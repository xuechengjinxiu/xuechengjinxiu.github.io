{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VColorPicker/VColorPickerEdit.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VColorPicker/VColorPickerEdit.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VColorPicker/VColorPickerEdit.sass\"; // Components\n\nimport VBtn from '../VBtn';\nimport VIcon from '../VIcon'; // Helpers\n\nimport { parseHex } from '../../util/colorUtils'; // Types\n\nimport Vue from 'vue';\nimport { fromRGBA, fromHexa, fromHSLA } from './util';\nexport const modes = {\n  rgba: {\n    inputs: [['r', 255, 'int'], ['g', 255, 'int'], ['b', 255, 'int'], ['a', 1, 'float']],\n    from: fromRGBA\n  },\n  hsla: {\n    inputs: [['h', 360, 'int'], ['s', 1, 'float'], ['l', 1, 'float'], ['a', 1, 'float']],\n    from: fromHSLA\n  },\n  hexa: {\n    from: fromHexa\n  }\n};\nexport default Vue.extend({\n  name: 'v-color-picker-edit',\n  props: {\n    color: Object,\n    disabled: Boolean,\n    hideAlpha: Boolean,\n    hideModeSwitch: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: v => Object.keys(modes).includes(v)\n    }\n  },\n\n  data() {\n    return {\n      modes,\n      internalMode: this.mode\n    };\n  },\n\n  computed: {\n    currentMode() {\n      return this.modes[this.internalMode];\n    }\n\n  },\n  watch: {\n    mode(mode) {\n      this.internalMode = mode;\n    }\n\n  },\n\n  created() {\n    this.internalMode = this.mode;\n  },\n\n  methods: {\n    getValue(v, type) {\n      if (type === 'float') return Math.round(v * 100) / 100;else if (type === 'int') return Math.round(v);else return 0;\n    },\n\n    parseValue(v, type) {\n      if (type === 'float') return parseFloat(v);else if (type === 'int') return parseInt(v, 10) || 0;else return 0;\n    },\n\n    changeMode() {\n      const modes = Object.keys(this.modes);\n      const index = modes.indexOf(this.internalMode);\n      const newMode = modes[(index + 1) % modes.length];\n      this.internalMode = newMode;\n      this.$emit('update:mode', newMode);\n    },\n\n    genInput(target, attrs, value, on) {\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__input'\n      }, [this.$createElement('input', {\n        key: target,\n        attrs,\n        domProps: {\n          value\n        },\n        on\n      }), this.$createElement('span', target.toUpperCase())]);\n    },\n\n    genInputs() {\n      switch (this.internalMode) {\n        case 'hexa':\n          {\n            const hex = this.color.hexa;\n            const value = this.hideAlpha && hex.endsWith('FF') ? hex.substr(0, 7) : hex;\n            return this.genInput('hex', {\n              maxlength: this.hideAlpha ? 7 : 9,\n              disabled: this.disabled\n            }, value, {\n              change: e => {\n                const el = e.target;\n                this.$emit('update:color', this.currentMode.from(parseHex(el.value)));\n              }\n            });\n          }\n\n        default:\n          {\n            const inputs = this.hideAlpha ? this.currentMode.inputs.slice(0, -1) : this.currentMode.inputs;\n            return inputs.map(([target, max, type]) => {\n              const value = this.color[this.internalMode];\n              return this.genInput(target, {\n                type: 'number',\n                min: 0,\n                max,\n                step: type === 'float' ? '0.01' : type === 'int' ? '1' : undefined,\n                disabled: this.disabled\n              }, this.getValue(value[target], type), {\n                input: e => {\n                  const el = e.target;\n                  const newVal = this.parseValue(el.value || '0', type);\n                  this.$emit('update:color', this.currentMode.from(Object.assign({}, value, {\n                    [target]: newVal\n                  }), this.color.alpha));\n                }\n              });\n            });\n          }\n      }\n    },\n\n    genSwitch() {\n      return this.$createElement(VBtn, {\n        props: {\n          small: true,\n          icon: true,\n          disabled: this.disabled\n        },\n        on: {\n          click: this.changeMode\n        }\n      }, [this.$createElement(VIcon, '$vuetify.icons.unfold')]);\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-color-picker__edit'\n    }, [this.genInputs(), !this.hideModeSwitch && this.genSwitch()]);\n  }\n\n});",null]}