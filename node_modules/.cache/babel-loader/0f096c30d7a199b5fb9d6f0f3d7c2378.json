{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VFileInput/VFileInput.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VFileInput/VFileInput.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _toConsumableArray from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _typeof from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Styles\nimport \"../../../src/components/VFileInput/VFileInput.sass\"; // Extensions\n\nimport VTextField from \"../VTextField\"; // Components\n\nimport { VChip } from \"../VChip\"; // Utilities\n\nimport { humanReadableFileSize, wrapInArray } from \"../../util/helpers\";\nimport { consoleError } from \"../../util/console\";\nexport default VTextField.extend({\n  name: 'v-file-input',\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  props: {\n    chips: Boolean,\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize'\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter'\n    },\n    placeholder: String,\n    prependIcon: {\n      type: String,\n      default: '$vuetify.icons.file'\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    showSize: {\n      type: [Boolean, Number],\n      default: false,\n      validator: function validator(v) {\n        return typeof v === 'boolean' || [1000, 1024].includes(v);\n      }\n    },\n    smallChips: Boolean,\n    truncateLength: {\n      type: [Number, String],\n      default: 22\n    },\n    type: {\n      type: String,\n      default: 'file'\n    },\n    value: {\n      default: function _default() {\n        return [];\n      },\n      validator: function validator(val) {\n        return _typeof(val) === 'object' || Array.isArray(val);\n      }\n    }\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread({}, VTextField.options.computed.classes.call(this), {\n        'v-file-input': true\n      });\n    },\n    counterValue: function counterValue() {\n      var fileCount = this.isMultiple && this.lazyValue ? this.lazyValue.length : this.lazyValue instanceof File ? 1 : 0;\n      if (!this.showSize) return this.$vuetify.lang.t(this.counterString, fileCount);\n      var bytes = this.internalArrayValue.reduce(function (size, file) {\n        return size + file.size;\n      }, 0);\n      return this.$vuetify.lang.t(this.counterSizeString, fileCount, humanReadableFileSize(bytes, this.base === 1024));\n    },\n    internalArrayValue: function internalArrayValue() {\n      return Array.isArray(this.internalValue) ? this.internalValue : wrapInArray(this.internalValue);\n    },\n    internalValue: {\n      get: function get() {\n        return this.lazyValue;\n      },\n      set: function set(val) {\n        this.lazyValue = val;\n        this.$emit('change', this.lazyValue);\n      }\n    },\n    isDirty: function isDirty() {\n      return this.internalArrayValue.length > 0;\n    },\n    isLabelActive: function isLabelActive() {\n      return this.isDirty;\n    },\n    isMultiple: function isMultiple() {\n      return this.$attrs.hasOwnProperty('multiple');\n    },\n    text: function text() {\n      var _this = this;\n\n      if (!this.isDirty) return [this.placeholder];\n      return this.internalArrayValue.map(function (file) {\n        var name = _this.truncateText(file.name);\n\n        return !_this.showSize ? name : \"\".concat(name, \" (\").concat(humanReadableFileSize(file.size, _this.base === 1024), \")\");\n      });\n    },\n    base: function base() {\n      return typeof this.showSize !== 'boolean' ? this.showSize : undefined;\n    },\n    hasChips: function hasChips() {\n      return this.chips || this.smallChips;\n    }\n  },\n  watch: {\n    readonly: {\n      handler: function handler(v) {\n        if (v === true) consoleError('readonly is not supported on <v-file-input>', this);\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    clearableCallback: function clearableCallback() {\n      this.internalValue = this.isMultiple ? [] : null;\n      this.$refs.input.value = '';\n    },\n    genChips: function genChips() {\n      var _this2 = this;\n\n      if (!this.isDirty) return [];\n      return this.text.map(function (text, index) {\n        return _this2.$createElement(VChip, {\n          props: {\n            small: _this2.smallChips\n          },\n          on: {\n            'click:close': function clickClose() {\n              var internalValue = _this2.internalValue;\n              internalValue.splice(index, 1);\n              _this2.internalValue = internalValue; // Trigger the watcher\n            }\n          }\n        }, [text]);\n      });\n    },\n    genInput: function genInput() {\n      var input = VTextField.options.methods.genInput.call(this); // We should not be setting value\n      // programmatically on the input\n      // when it is using type=\"file\"\n\n      delete input.data.domProps.value; // This solves an issue in Safari where\n      // nothing happens when adding a file\n      // do to the input event not firing\n      // https://github.com/vuetifyjs/vuetify/issues/7941\n\n      delete input.data.on.input;\n      input.data.on.change = this.onInput;\n      return [this.genSelections(), input];\n    },\n    genPrependSlot: function genPrependSlot() {\n      var _this3 = this;\n\n      if (!this.prependIcon) return null;\n      var icon = this.genIcon('prepend', function () {\n        _this3.$refs.input.click();\n      });\n      return this.genSlot('prepend', 'outer', [icon]);\n    },\n    genSelectionText: function genSelectionText() {\n      var length = this.text.length;\n      if (length < 2) return this.text;\n      if (this.showSize && !this.counter) return [this.counterValue];\n      return [this.$vuetify.lang.t(this.counterString, length)];\n    },\n    genSelections: function genSelections() {\n      var _this4 = this;\n\n      var children = [];\n\n      if (this.isDirty && this.$scopedSlots.selection) {\n        this.internalArrayValue.forEach(function (file, index) {\n          if (!_this4.$scopedSlots.selection) return;\n          children.push(_this4.$scopedSlots.selection({\n            text: _this4.text[index],\n            file: file,\n            index: index\n          }));\n        });\n      } else {\n        children.push(this.hasChips && this.isDirty ? this.genChips() : this.genSelectionText());\n      }\n\n      return this.$createElement('div', {\n        staticClass: 'v-file-input__text',\n        class: {\n          'v-file-input__text--placeholder': this.placeholder && !this.isDirty,\n          'v-file-input__text--chips': this.hasChips && !this.$scopedSlots.selection\n        },\n        on: {\n          click: function click() {\n            return _this4.$refs.input.click();\n          }\n        }\n      }, children);\n    },\n    onInput: function onInput(e) {\n      var files = _toConsumableArray(e.target.files || []);\n\n      this.internalValue = this.isMultiple ? files : files[0]; // Set initialValue here otherwise isFocused\n      // watcher in VTextField will emit a change\n      // event whenever the component is blurred\n\n      this.initialValue = this.internalValue;\n    },\n    onKeyDown: function onKeyDown(e) {\n      this.$emit('keydown', e);\n    },\n    truncateText: function truncateText(str) {\n      if (str.length < Number(this.truncateLength)) return str;\n      return \"\".concat(str.slice(0, 10), \"\\u2026\").concat(str.slice(-10));\n    }\n  }\n});",null]}