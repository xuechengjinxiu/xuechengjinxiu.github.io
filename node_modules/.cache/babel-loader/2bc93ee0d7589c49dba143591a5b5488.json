{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-intervals.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-intervals.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Mixins\nimport CalendarBase from \"./calendar-base\"; // Util\n\nimport props from \"../util/props\";\nimport { parseTime, copyTimestamp, updateMinutes, createDayList, createIntervalList, createNativeLocaleFormatter } from \"../util/timestamp\";\n/* @vue/component */\n\nexport default CalendarBase.extend({\n  name: 'calendar-with-intervals',\n  props: props.intervals,\n  computed: {\n    parsedFirstInterval: function parsedFirstInterval() {\n      return parseInt(this.firstInterval);\n    },\n    parsedIntervalMinutes: function parsedIntervalMinutes() {\n      return parseInt(this.intervalMinutes);\n    },\n    parsedIntervalCount: function parsedIntervalCount() {\n      return parseInt(this.intervalCount);\n    },\n    parsedIntervalHeight: function parsedIntervalHeight() {\n      return parseFloat(this.intervalHeight);\n    },\n    firstMinute: function firstMinute() {\n      return this.parsedFirstInterval * this.parsedIntervalMinutes;\n    },\n    bodyHeight: function bodyHeight() {\n      return this.parsedIntervalCount * this.parsedIntervalHeight;\n    },\n    days: function days() {\n      return createDayList(this.parsedStart, this.parsedEnd, this.times.today, this.weekdaySkips, this.maxDays);\n    },\n    intervals: function intervals() {\n      var days = this.days;\n      var first = this.parsedFirstInterval;\n      var minutes = this.parsedIntervalMinutes;\n      var count = this.parsedIntervalCount;\n      var now = this.times.now;\n      return days.map(function (d) {\n        return createIntervalList(d, first, minutes, count, now);\n      });\n    },\n    intervalFormatter: function intervalFormatter() {\n      if (this.intervalFormat) {\n        return this.intervalFormat;\n      }\n\n      var longOptions = {\n        timeZone: 'UTC',\n        hour12: true,\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      var shortOptions = {\n        timeZone: 'UTC',\n        hour12: true,\n        hour: 'numeric',\n        minute: '2-digit'\n      };\n      var shortHourOptions = {\n        timeZone: 'UTC',\n        hour12: true,\n        hour: 'numeric'\n      };\n      return createNativeLocaleFormatter(this.currentLocale, function (tms, short) {\n        return short ? tms.minute === 0 ? shortHourOptions : shortOptions : longOptions;\n      });\n    }\n  },\n  methods: {\n    showIntervalLabelDefault: function showIntervalLabelDefault(interval) {\n      var first = this.intervals[0][0];\n      var isFirst = first.hour === interval.hour && first.minute === interval.minute;\n      return !isFirst && interval.minute === 0;\n    },\n    intervalStyleDefault: function intervalStyleDefault(_interval) {\n      return undefined;\n    },\n    getTimestampAtEvent: function getTimestampAtEvent(e, day) {\n      var timestamp = copyTimestamp(day);\n      var bounds = e.currentTarget.getBoundingClientRect();\n      var baseMinutes = this.firstMinute;\n      var touchEvent = e;\n      var mouseEvent = e;\n      var touches = touchEvent.changedTouches || touchEvent.touches;\n      var clientY = touches && touches[0] ? touches[0].clientY : mouseEvent.clientY;\n      var addIntervals = (clientY - bounds.top) / this.parsedIntervalHeight;\n      var addMinutes = Math.floor(addIntervals * this.parsedIntervalMinutes);\n      var minutes = baseMinutes + addMinutes;\n      return updateMinutes(timestamp, minutes, this.times.now);\n    },\n    getSlotScope: function getSlotScope(timestamp) {\n      var scope = copyTimestamp(timestamp);\n      scope.timeToY = this.timeToY;\n      scope.minutesToPixels = this.minutesToPixels;\n      return scope;\n    },\n    scrollToTime: function scrollToTime(time) {\n      var y = this.timeToY(time);\n      var pane = this.$refs.scrollArea;\n\n      if (y === false || !pane) {\n        return false;\n      }\n\n      pane.scrollTop = y;\n      return true;\n    },\n    minutesToPixels: function minutesToPixels(minutes) {\n      return minutes / this.parsedIntervalMinutes * this.parsedIntervalHeight;\n    },\n    timeToY: function timeToY(time) {\n      var clamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var minutes = parseTime(time);\n\n      if (minutes === false) {\n        return false;\n      }\n\n      var min = this.firstMinute;\n      var gap = this.parsedIntervalCount * this.parsedIntervalMinutes;\n      var delta = (minutes - min) / gap;\n      var y = delta * this.bodyHeight;\n\n      if (clamp) {\n        if (y < 0) {\n          y = 0;\n        }\n\n        if (y > this.bodyHeight) {\n          y = this.bodyHeight;\n        }\n      }\n\n      return y;\n    }\n  }\n});",null]}