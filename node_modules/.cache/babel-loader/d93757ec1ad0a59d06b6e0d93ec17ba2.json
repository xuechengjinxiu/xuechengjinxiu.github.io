{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VSlider/VSlider.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VSlider/VSlider.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport \"../../../src/components/VSlider/VSlider.sass\"; // Components\n\nimport VInput from \"../VInput\";\nimport { VScaleTransition } from \"../transitions\"; // Mixins\n\nimport mixins from \"../../util/mixins\";\nimport Loadable from \"../../mixins/loadable\"; // Directives\n\nimport ClickOutside from \"../../directives/click-outside\"; // Helpers\n\nimport { addOnceEventListener, deepEqual, keyCodes, createRange, convertToUnit, passiveSupported } from \"../../util/helpers\";\nimport { consoleWarn } from \"../../util/console\";\nexport default mixins(VInput, Loadable\n/* @vue/component */\n).extend({\n  name: 'v-slider',\n  directives: {\n    ClickOutside: ClickOutside\n  },\n  mixins: [Loadable],\n  props: {\n    disabled: Boolean,\n    inverseLabel: Boolean,\n    max: {\n      type: [Number, String],\n      default: 100\n    },\n    min: {\n      type: [Number, String],\n      default: 0\n    },\n    step: {\n      type: [Number, String],\n      default: 1\n    },\n    thumbColor: String,\n    thumbLabel: {\n      type: [Boolean, String],\n      default: null,\n      validator: function validator(v) {\n        return typeof v === 'boolean' || v === 'always';\n      }\n    },\n    thumbSize: {\n      type: [Number, String],\n      default: 32\n    },\n    tickLabels: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    ticks: {\n      type: [Boolean, String],\n      default: false,\n      validator: function validator(v) {\n        return typeof v === 'boolean' || v === 'always';\n      }\n    },\n    tickSize: {\n      type: [Number, String],\n      default: 2\n    },\n    trackColor: String,\n    trackFillColor: String,\n    value: [Number, String],\n    vertical: Boolean\n  },\n  data: function data() {\n    return {\n      app: null,\n      oldValue: null,\n      keyPressed: 0,\n      isFocused: false,\n      isActive: false,\n      lazyValue: 0,\n      noClick: false\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread({}, VInput.options.computed.classes.call(this), {\n        'v-input__slider': true,\n        'v-input__slider--vertical': this.vertical,\n        'v-input__slider--inverse-label': this.inverseLabel\n      });\n    },\n    internalValue: {\n      get: function get() {\n        return this.lazyValue;\n      },\n      set: function set(val) {\n        val = isNaN(val) ? this.minValue : val; // Round value to ensure the\n        // entire slider range can\n        // be selected with step\n\n        var value = this.roundValue(Math.min(Math.max(val, this.minValue), this.maxValue));\n        if (value === this.lazyValue) return;\n        this.lazyValue = value;\n        this.$emit('input', value);\n      }\n    },\n    trackTransition: function trackTransition() {\n      return this.keyPressed >= 2 ? 'none' : '';\n    },\n    minValue: function minValue() {\n      return parseFloat(this.min);\n    },\n    maxValue: function maxValue() {\n      return parseFloat(this.max);\n    },\n    stepNumeric: function stepNumeric() {\n      return this.step > 0 ? parseFloat(this.step) : 0;\n    },\n    inputWidth: function inputWidth() {\n      var value = (this.roundValue(this.internalValue) - this.minValue) / (this.maxValue - this.minValue) * 100;\n      return value;\n    },\n    trackFillStyles: function trackFillStyles() {\n      var _ref;\n\n      var startDir = this.vertical ? 'bottom' : 'left';\n      var endDir = this.vertical ? 'top' : 'right';\n      var valueDir = this.vertical ? 'height' : 'width';\n      var start = this.$vuetify.rtl ? 'auto' : '0';\n      var end = this.$vuetify.rtl ? '0' : 'auto';\n      var value = this.disabled ? \"calc(\".concat(this.inputWidth, \"% - 10px)\") : \"\".concat(this.inputWidth, \"%\");\n      return _ref = {\n        transition: this.trackTransition\n      }, _defineProperty(_ref, startDir, start), _defineProperty(_ref, endDir, end), _defineProperty(_ref, valueDir, value), _ref;\n    },\n    trackStyles: function trackStyles() {\n      var _ref2;\n\n      var startDir = this.vertical ? this.$vuetify.rtl ? 'bottom' : 'top' : this.$vuetify.rtl ? 'left' : 'right';\n      var endDir = this.vertical ? 'height' : 'width';\n      var start = '0px';\n      var end = this.disabled ? \"calc(\".concat(100 - this.inputWidth, \"% - 10px)\") : \"calc(\".concat(100 - this.inputWidth, \"%)\");\n      return _ref2 = {\n        transition: this.trackTransition\n      }, _defineProperty(_ref2, startDir, start), _defineProperty(_ref2, endDir, end), _ref2;\n    },\n    showTicks: function showTicks() {\n      return this.tickLabels.length > 0 || !!(!this.disabled && this.stepNumeric && this.ticks);\n    },\n    numTicks: function numTicks() {\n      return Math.ceil((this.maxValue - this.minValue) / this.stepNumeric);\n    },\n    showThumbLabel: function showThumbLabel() {\n      return !this.disabled && !!(this.thumbLabel || this.$scopedSlots['thumb-label']);\n    },\n    computedTrackColor: function computedTrackColor() {\n      if (this.disabled) return undefined;\n      if (this.trackColor) return this.trackColor;\n      if (this.isDark) return this.validationState;\n      return this.validationState || 'primary lighten-3';\n    },\n    computedTrackFillColor: function computedTrackFillColor() {\n      if (this.disabled) return undefined;\n      if (this.trackFillColor) return this.trackFillColor;\n      return this.validationState || this.computedColor;\n    },\n    computedThumbColor: function computedThumbColor() {\n      if (this.thumbColor) return this.thumbColor;\n      return this.validationState || this.computedColor;\n    }\n  },\n  watch: {\n    min: function min(val) {\n      var parsed = parseFloat(val);\n      parsed > this.internalValue && this.$emit('input', parsed);\n    },\n    max: function max(val) {\n      var parsed = parseFloat(val);\n      parsed < this.internalValue && this.$emit('input', parsed);\n    },\n    value: {\n      handler: function handler(v) {\n        this.internalValue = v;\n      }\n    }\n  },\n  // If done in as immediate in\n  // value watcher, causes issues\n  // with vue-test-utils\n  beforeMount: function beforeMount() {\n    this.internalValue = this.value;\n  },\n  mounted: function mounted() {\n    // Without a v-app, iOS does not work with body selectors\n    this.app = document.querySelector('[data-app]') || consoleWarn('Missing v-app or a non-body wrapping element with the [data-app] attribute', this);\n  },\n  methods: {\n    genDefaultSlot: function genDefaultSlot() {\n      var children = [this.genLabel()];\n      var slider = this.genSlider();\n      this.inverseLabel ? children.unshift(slider) : children.push(slider);\n      children.push(this.genProgress());\n      return children;\n    },\n    genSlider: function genSlider() {\n      return this.$createElement('div', {\n        class: _objectSpread({\n          'v-slider': true,\n          'v-slider--horizontal': !this.vertical,\n          'v-slider--vertical': this.vertical,\n          'v-slider--focused': this.isFocused,\n          'v-slider--active': this.isActive,\n          'v-slider--disabled': this.disabled,\n          'v-slider--readonly': this.readonly\n        }, this.themeClasses),\n        directives: [{\n          name: 'click-outside',\n          value: this.onBlur\n        }],\n        on: {\n          click: this.onSliderClick\n        }\n      }, this.genChildren());\n    },\n    genChildren: function genChildren() {\n      return [this.genInput(), this.genTrackContainer(), this.genSteps(), this.genThumbContainer(this.internalValue, this.inputWidth, this.isActive, this.isFocused, this.onThumbMouseDown, this.onFocus, this.onBlur)];\n    },\n    genInput: function genInput() {\n      return this.$createElement('input', {\n        attrs: _objectSpread({\n          value: this.internalValue,\n          id: this.computedId,\n          disabled: this.disabled,\n          readonly: true,\n          tabindex: -1\n        }, this.$attrs)\n      });\n    },\n    genTrackContainer: function genTrackContainer() {\n      var children = [this.$createElement('div', this.setBackgroundColor(this.computedTrackColor, {\n        staticClass: 'v-slider__track-background',\n        style: this.trackStyles\n      })), this.$createElement('div', this.setBackgroundColor(this.computedTrackFillColor, {\n        staticClass: 'v-slider__track-fill',\n        style: this.trackFillStyles\n      }))];\n      return this.$createElement('div', {\n        staticClass: 'v-slider__track-container',\n        ref: 'track'\n      }, children);\n    },\n    genSteps: function genSteps() {\n      var _this = this;\n\n      if (!this.step || !this.showTicks) return null;\n      var tickSize = parseFloat(this.tickSize);\n      var range = createRange(this.numTicks + 1);\n      var direction = this.vertical ? 'bottom' : 'left';\n      var offsetDirection = this.vertical ? 'right' : 'top';\n      if (this.vertical) range.reverse();\n      var ticks = range.map(function (i) {\n        var _style;\n\n        var index = _this.$vuetify.rtl ? _this.maxValue - i : i;\n        var children = [];\n\n        if (_this.tickLabels[index]) {\n          children.push(_this.$createElement('div', {\n            staticClass: 'v-slider__tick-label'\n          }, _this.tickLabels[index]));\n        }\n\n        var width = i * (100 / _this.numTicks);\n        var filled = _this.$vuetify.rtl ? 100 - _this.inputWidth < width : width < _this.inputWidth;\n        return _this.$createElement('span', {\n          key: i,\n          staticClass: 'v-slider__tick',\n          class: {\n            'v-slider__tick--filled': filled\n          },\n          style: (_style = {\n            width: \"\".concat(tickSize, \"px\"),\n            height: \"\".concat(tickSize, \"px\")\n          }, _defineProperty(_style, direction, \"calc(\".concat(width, \"% - \").concat(tickSize / 2, \"px)\")), _defineProperty(_style, offsetDirection, \"calc(50% - \".concat(tickSize / 2, \"px)\")), _style)\n        }, children);\n      });\n      return this.$createElement('div', {\n        staticClass: 'v-slider__ticks-container',\n        class: {\n          'v-slider__ticks-container--always-show': this.ticks === 'always' || this.tickLabels.length > 0\n        }\n      }, ticks);\n    },\n    genThumbContainer: function genThumbContainer(value, valueWidth, isActive, isFocused, onDrag, onFocus, onBlur) {\n      var ref = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'thumb';\n      var children = [this.genThumb()];\n      var thumbLabelContent = this.genThumbLabelContent(value);\n      this.showThumbLabel && children.push(this.genThumbLabel(thumbLabelContent));\n      return this.$createElement('div', this.setTextColor(this.computedThumbColor, {\n        ref: ref,\n        staticClass: 'v-slider__thumb-container',\n        class: {\n          'v-slider__thumb-container--active': isActive,\n          'v-slider__thumb-container--focused': isFocused,\n          'v-slider__thumb-container--show-label': this.showThumbLabel\n        },\n        style: this.getThumbContainerStyles(valueWidth),\n        attrs: _objectSpread({\n          role: 'slider',\n          tabindex: this.disabled || this.readonly ? -1 : this.$attrs.tabindex ? this.$attrs.tabindex : 0,\n          'aria-label': this.label,\n          'aria-valuemin': this.min,\n          'aria-valuemax': this.max,\n          'aria-valuenow': this.internalValue,\n          'aria-readonly': String(this.readonly),\n          'aria-orientation': this.vertical ? 'vertical' : 'horizontal'\n        }, this.$attrs),\n        on: {\n          focus: onFocus,\n          blur: onBlur,\n          keydown: this.onKeyDown,\n          keyup: this.onKeyUp,\n          touchstart: onDrag,\n          mousedown: onDrag\n        }\n      }), children);\n    },\n    genThumbLabelContent: function genThumbLabelContent(value) {\n      return this.$scopedSlots['thumb-label'] ? this.$scopedSlots['thumb-label']({\n        value: value\n      }) : [this.$createElement('span', [String(value)])];\n    },\n    genThumbLabel: function genThumbLabel(content) {\n      var size = convertToUnit(this.thumbSize);\n      var transform = this.vertical ? \"translateY(20%) translateY(\".concat(Number(this.thumbSize) / 3 - 1, \"px) translateX(55%) rotate(135deg)\") : \"translateY(-20%) translateY(-12px) translateX(-50%) rotate(45deg)\";\n      return this.$createElement(VScaleTransition, {\n        props: {\n          origin: 'bottom center'\n        }\n      }, [this.$createElement('div', {\n        staticClass: 'v-slider__thumb-label-container',\n        directives: [{\n          name: 'show',\n          value: this.isFocused || this.isActive || this.thumbLabel === 'always'\n        }]\n      }, [this.$createElement('div', this.setBackgroundColor(this.computedThumbColor, {\n        staticClass: 'v-slider__thumb-label',\n        style: {\n          height: size,\n          width: size,\n          transform: transform\n        }\n      }), [this.$createElement('div', content)])])]);\n    },\n    genThumb: function genThumb() {\n      return this.$createElement('div', this.setBackgroundColor(this.computedThumbColor, {\n        staticClass: 'v-slider__thumb'\n      }));\n    },\n    getThumbContainerStyles: function getThumbContainerStyles(width) {\n      var direction = this.vertical ? 'top' : 'left';\n      var value = this.$vuetify.rtl ? 100 - width : width;\n      value = this.vertical ? 100 - value : value;\n      return _defineProperty({\n        transition: this.trackTransition\n      }, direction, \"\".concat(value, \"%\"));\n    },\n    onThumbMouseDown: function onThumbMouseDown(e) {\n      this.oldValue = this.internalValue;\n      this.keyPressed = 2;\n      this.isActive = true;\n      var mouseUpOptions = passiveSupported ? {\n        passive: true,\n        capture: true\n      } : true;\n      var mouseMoveOptions = passiveSupported ? {\n        passive: true\n      } : false;\n\n      if ('touches' in e) {\n        this.app.addEventListener('touchmove', this.onMouseMove, mouseMoveOptions);\n        addOnceEventListener(this.app, 'touchend', this.onSliderMouseUp, mouseUpOptions);\n      } else {\n        this.app.addEventListener('mousemove', this.onMouseMove, mouseMoveOptions);\n        addOnceEventListener(this.app, 'mouseup', this.onSliderMouseUp, mouseUpOptions);\n      }\n\n      this.$emit('start', this.internalValue);\n    },\n    onSliderMouseUp: function onSliderMouseUp(e) {\n      e.stopPropagation();\n      this.keyPressed = 0;\n      var mouseMoveOptions = passiveSupported ? {\n        passive: true\n      } : false;\n      this.app.removeEventListener('touchmove', this.onMouseMove, mouseMoveOptions);\n      this.app.removeEventListener('mousemove', this.onMouseMove, mouseMoveOptions);\n      this.$emit('end', this.internalValue);\n\n      if (!deepEqual(this.oldValue, this.internalValue)) {\n        this.$emit('change', this.internalValue);\n        this.noClick = true;\n      }\n\n      this.isActive = false;\n    },\n    onMouseMove: function onMouseMove(e) {\n      var _this$parseMouseMove = this.parseMouseMove(e),\n          value = _this$parseMouseMove.value;\n\n      this.internalValue = value;\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (this.disabled || this.readonly) return;\n      var value = this.parseKeyDown(e, this.internalValue);\n      if (value == null) return;\n      this.internalValue = value;\n      this.$emit('change', value);\n    },\n    onKeyUp: function onKeyUp() {\n      this.keyPressed = 0;\n    },\n    onSliderClick: function onSliderClick(e) {\n      if (this.noClick) {\n        this.noClick = false;\n        return;\n      }\n\n      var thumb = this.$refs.thumb;\n      thumb.focus();\n      this.onMouseMove(e);\n      this.$emit('change', this.internalValue);\n    },\n    onBlur: function onBlur(e) {\n      this.isFocused = false;\n      this.$emit('blur', e);\n    },\n    onFocus: function onFocus(e) {\n      this.isFocused = true;\n      this.$emit('focus', e);\n    },\n    parseMouseMove: function parseMouseMove(e) {\n      var start = this.vertical ? 'top' : 'left';\n      var length = this.vertical ? 'height' : 'width';\n      var click = this.vertical ? 'clientY' : 'clientX';\n\n      var _this$$refs$track$get = this.$refs.track.getBoundingClientRect(),\n          trackStart = _this$$refs$track$get[start],\n          trackLength = _this$$refs$track$get[length];\n\n      var clickOffset = 'touches' in e ? e.touches[0][click] : e[click]; // Can we get rid of any here?\n      // It is possible for left to be NaN, force to number\n\n      var clickPos = Math.min(Math.max((clickOffset - trackStart) / trackLength, 0), 1) || 0;\n      if (this.vertical) clickPos = 1 - clickPos;\n      if (this.$vuetify.rtl) clickPos = 1 - clickPos;\n      var isInsideTrack = clickOffset >= trackStart && clickOffset <= trackStart + trackLength;\n      var value = parseFloat(this.min) + clickPos * (this.maxValue - this.minValue);\n      return {\n        value: value,\n        isInsideTrack: isInsideTrack\n      };\n    },\n    parseKeyDown: function parseKeyDown(e, value) {\n      if (this.disabled) return;\n      var pageup = keyCodes.pageup,\n          pagedown = keyCodes.pagedown,\n          end = keyCodes.end,\n          home = keyCodes.home,\n          left = keyCodes.left,\n          right = keyCodes.right,\n          down = keyCodes.down,\n          up = keyCodes.up;\n      if (![pageup, pagedown, end, home, left, right, down, up].includes(e.keyCode)) return;\n      e.preventDefault();\n      var step = this.stepNumeric || 1;\n      var steps = (this.maxValue - this.minValue) / step;\n\n      if ([left, right, down, up].includes(e.keyCode)) {\n        this.keyPressed += 1;\n        var increase = this.$vuetify.rtl ? [left, up] : [right, up];\n        var direction = increase.includes(e.keyCode) ? 1 : -1;\n        var multiplier = e.shiftKey ? 3 : e.ctrlKey ? 2 : 1;\n        value = value + direction * step * multiplier;\n      } else if (e.keyCode === home) {\n        value = this.minValue;\n      } else if (e.keyCode === end) {\n        value = this.maxValue;\n      } else {\n        var _direction = e.keyCode === pagedown ? 1 : -1;\n\n        value = value - _direction * step * (steps > 100 ? steps / 10 : 10);\n      }\n\n      return value;\n    },\n    roundValue: function roundValue(value) {\n      if (!this.stepNumeric) return value; // Format input value using the same number\n      // of decimals places as in the step prop\n\n      var trimmedStep = this.step.toString().trim();\n      var decimals = trimmedStep.indexOf('.') > -1 ? trimmedStep.length - trimmedStep.indexOf('.') - 1 : 0;\n      var offset = this.minValue % this.stepNumeric;\n      var newValue = Math.round((value - offset) / this.stepNumeric) * this.stepNumeric + offset;\n      return parseFloat(Math.min(newValue, this.maxValue).toFixed(decimals));\n    }\n  }\n});",null]}