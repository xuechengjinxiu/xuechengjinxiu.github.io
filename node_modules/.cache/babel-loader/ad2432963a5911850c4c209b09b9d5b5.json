{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VBottomNavigation/VBottomNavigation.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VBottomNavigation/VBottomNavigation.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VBottomNavigation/VBottomNavigation.sass\"; // Mixins\n\nimport Applicationable from '../../mixins/applicationable';\nimport ButtonGroup from '../../mixins/button-group';\nimport Colorable from '../../mixins/colorable';\nimport Measurable from '../../mixins/measurable';\nimport Proxyable from '../../mixins/proxyable';\nimport Scrollable from '../../mixins/scrollable';\nimport Themeable from '../../mixins/themeable';\nimport { factory as ToggleableFactory } from '../../mixins/toggleable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { breaking } from '../../util/console';\nexport default mixins(Applicationable('bottom', ['height', 'inputValue']), Colorable, Measurable, ToggleableFactory('inputValue'), Proxyable, Scrollable, Themeable\n/* @vue/component */\n).extend({\n  name: 'v-bottom-navigation',\n  props: {\n    activeClass: {\n      type: String,\n      default: 'v-btn--active'\n    },\n    backgroundColor: String,\n    grow: Boolean,\n    height: {\n      type: [Number, String],\n      default: 56\n    },\n    hideOnScroll: Boolean,\n    horizontal: Boolean,\n    inputValue: {\n      type: Boolean,\n      default: true\n    },\n    mandatory: Boolean,\n    shift: Boolean\n  },\n\n  data() {\n    return {\n      isActive: this.inputValue\n    };\n  },\n\n  computed: {\n    canScroll() {\n      return Scrollable.options.computed.canScroll.call(this) && (this.hideOnScroll || !this.inputValue);\n    },\n\n    classes() {\n      return {\n        'v-bottom-navigation--absolute': this.absolute,\n        'v-bottom-navigation--grow': this.grow,\n        'v-bottom-navigation--fixed': !this.absolute && (this.app || this.fixed),\n        'v-bottom-navigation--horizontal': this.horizontal,\n        'v-bottom-navigation--shift': this.shift\n      };\n    },\n\n    styles() {\n      return { ...this.measurableStyles,\n        transform: this.isActive ? 'none' : 'translateY(100%)'\n      };\n    }\n\n  },\n\n  created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('active')) {\n      breaking('active.sync', 'value or v-model', this);\n    }\n  },\n\n  methods: {\n    thresholdMet() {\n      this.isActive = !this.isScrollingUp;\n      this.$emit('update:input-value', this.isActive);\n    },\n\n    updateApplication() {\n      return this.$el ? this.$el.clientHeight : 0;\n    },\n\n    updateValue(val) {\n      this.$emit('change', val);\n    }\n\n  },\n\n  render(h) {\n    const data = this.setBackgroundColor(this.backgroundColor, {\n      staticClass: 'v-bottom-navigation',\n      class: this.classes,\n      style: this.styles,\n      props: {\n        activeClass: this.activeClass,\n        mandatory: Boolean(this.mandatory || this.value !== undefined),\n        value: this.internalValue\n      },\n      on: {\n        change: this.updateValue\n      }\n    });\n\n    if (this.canScroll) {\n      data.directives = data.directives || [];\n      data.directives.push({\n        arg: this.scrollTarget,\n        name: 'scroll',\n        value: this.onScroll\n      });\n    }\n\n    return h(ButtonGroup, this.setTextColor(this.color, data), this.$slots.default);\n  }\n\n});",null]}