{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/views/ComCreRes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/views/ComCreRes.vue","mtime":1585119550000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport seedLib, { Seed } from \"@/libs1/seed\";\nimport words from \"@/libs1/word-list\";\nexport default {\n  props: {\n    hasSilder: {\n      type: Boolean,\n      default: false\n    },\n    titleTip: String,\n    tipsBtn: String,\n    seedWords: String\n  },\n  created() {},\n  data() {\n    return {\n      walletNum: 1,\n      checkWordPromp: \"\",\n      valid: false,\n      password: \"\",\n      password2: \"\",\n      dialog: false,\n      passSeed: true,\n      // addressAmount: 1,\n      rules: {\n        required: f => {\n          return v => !!v || `${f} is required`;\n        },\n        min: (f, n) => {\n          return v =>\n            (v == null ? \"\" : v).length >= n ||\n            `${f} is too short (should be at least ${n} characters)`;\n        },\n        max: (f, n) => {\n          return v =>\n            (v == null ? \"\" : v).length <= n ||\n            `${f} is too long (should be at most ${n} characters)`;\n        },\n        noSymbol: f => {\n          return v =>\n            !/[-+\\\\.,/()*&^%$#@!~?{};:<>|]/.test(v) ||\n            `${f} is not valid (special symbols detected)`;\n        },\n        containAlpha: f => {\n          return v =>\n            /[a-zA-z]/.test(v) || `${f} must contain alphabetical character`;\n        },\n        passEquel: txt => {\n          return v => v === txt || \"Passwords are not the same\";\n        }\n      }\n    };\n  },\n  computed: {\n    checkStrong() {\n      if (this.password != null) {\n        if (this.password.length >= 8 && this.password.length <= 32) {\n          let Modes = 0;\n          for (let i = 0; i < this.password.length; i++) {\n            Modes |= this.checkMode(this.password.charCodeAt(i));\n          }\n          console.log(Modes);\n          return this.bitTotal(Modes);\n        }\n      }\n      return 0;\n    }\n  },\n  watch: {\n    dialog(nv) {\n      //lock scroll when dialog is open\n      this.$utils.lockScroll(nv);\n    }\n  },\n  methods: {\n    clearSeeds() {\n      this.$refs.textarea.value = \"\";\n    },\n    checkMode(NP) {\n      if (NP >= 48 && NP <= 57) return 1; //number\n      if (NP >= 65 && NP <= 90) return 2; //uppercase\n      if (NP >= 97 && NP <= 122) return 2;\n      //lowercase\n      else return 4;\n    },\n    bitTotal(num) {\n      let modes = 0;\n      for (let i = 0; i < 4; i++) {\n        if (num & 1) modes++;\n        num >>>= 1; // displacement calculation\n      }\n      console.log(modes);\n      return modes;\n    },\n    checkWords() {\n      let checkWords = this.$refs.textarea.value\n        .trim()\n        .replace(/\\s+|\\r+|\\n+/g, \" \")\n        .split(\" \");\n      if (checkWords.length >= 15 && checkWords.length <= 18) {\n        let warningWords = checkWords.filter(\n          item => words.indexOf(item) === -1\n        );\n        if (warningWords.length != 0) {\n          // alert(\"warning! \" + warningWords + \" is not in the vocabulary\");\n          this.checkWordPromp = \"Warning! Some words is not in the vocabulary\";\n        } else {\n          this.checkWordPromp = \"\";\n        }\n        return true;\n      } else {\n        // alert(\"Your seed should be more than 15 and less than 18\");\n        this.checkWordPromp =\n          \"Your seed should be more than 15 and less than 18\";\n        return false;\n      }\n    },\n    register() {\n      if (!this.checkWords()) return;\n      if (!this.$refs.form.validate()) return;\n      //Clear Old Info\n      window.localStorage.clear();\n      this.$store.commit(\"reset_state\");\n      //Get Seed Words\n      let standardSeed = this.$refs.textarea.value\n        .trim()\n        .replace(/\\s+|\\r+|\\n+/g, \" \");\n      //encrypt seed\n      const userInfo = {\n        encrSeed: seedLib.encryptSeedPhrase(standardSeed, this.password)\n      };\n      let aliasObj = {};\n      // Storage vuex\n      this.$store.commit(\"ADD_INFO\", {\n        password: this.password,\n        seed: standardSeed,\n        walletCount: this.walletNum,\n        currentIndex: 0\n      });\n      for (let i = 0; i < this.walletNum; i++) {\n        //Generate seed information\n        aliasObj[i] = \"\";\n        this.seed = new Seed(standardSeed, i, this.$config.NET_BYTE);\n        this.$store.commit(\"add_wallets\", {\n          index: i,\n          data: {\n            address: this.seed.address,\n            keyPair: this.seed.keyPair,\n            alias: \"\",\n            balance: \"\",\n            vsysBalance: 0,\n            transactionCount: \"\",\n            updateTime: \"\"\n          }\n        });\n      }\n      //Init encryptSeed\n      window.localStorage[\"encryptSeed\"] = seedLib.encryptSeedPhrase(\n        JSON.stringify(userInfo),\n        this.password\n      );\n      //Init sessionTimeout\n      window.localStorage[\"sessionTimeout\"] = 5;\n      //Init lastLogin\n      window.localStorage[\"lastLogin\"] = new Date().getTime();\n      //Init walletCount\n      window.localStorage[\"walletCount\"] = this.walletNum;\n      //Init alias\n      window.localStorage[\"alias\"] = JSON.stringify(aliasObj);\n      //goto createsecond\n      this.$router.replace({ path: \"/createsecond\" });\n    }\n  }\n};\n",null]}