{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js??ref--13-0!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/store.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/store.js","mtime":1585119550000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport utils from \"@/utils/common.js\";\nimport axios from \"axios\";\nVue.use(Vuex);\nvar initState = {\n  password: \"\",\n  seed: \"\",\n  walletCount: 0,\n  currentIndex: 0,\n  wallets: [],\n  sendInfo: {},\n  isHeaderOpen: false,\n  loginType: \"\"\n};\nexport default new Vuex.Store({\n  state: utils.deepClone(initState),\n  mutations: {\n    ADD_INFO: function ADD_INFO(state, data) {\n      for (var i in data) {\n        //If not exist, use Vue.set\n        if (!state[i]) {\n          Vue.set(state, i, data[i]);\n        } else {\n          state[i] = data[i];\n        }\n      }\n    },\n    add_wallets: function add_wallets(state, data) {\n      Vue.set(state.wallets, data.index, data.data);\n    },\n    update_balance: function update_balance(state, data) {\n      state.wallets[data.index].balance = data.balance;\n      state.wallets[data.index].transactionCount = data.transactionCount;\n      state.wallets[data.index].updateTime = new Date().getTime();\n    },\n    update_wallet: function update_wallet(state, data) {\n      for (var key in data) {\n        if (key !== \"index\") {\n          state.wallets[data.index][key] = data[key];\n        }\n      }\n    },\n    update_loginType: function update_loginType(state, data) {\n      state.loginType = data;\n    },\n    update_sendInfo: function update_sendInfo(state, data) {\n      for (var key in data) {\n        state.sendInfo[key] = data[key];\n      }\n    },\n    reset_sendinfo: function reset_sendinfo(state) {\n      var keys = [\"recipient\", \"amount\", \"description\"];\n      keys.forEach(function (k) {\n        state.sendInfo[k] = \"\";\n      });\n    },\n    update_header: function update_header(state, data) {\n      state.isHeaderOpen = data;\n    },\n    // requestTokenInfo:({state})=>{\n    //\n    // }\n    reset_state: function reset_state(state) {\n      Object.assign(state, utils.deepClone(initState));\n    }\n  },\n  getters: {\n    currentWallet: function currentWallet(state) {\n      return state.wallets[state.currentIndex];\n    },\n    balance: function balance(state) {\n      if (!state.wallets[state.currentIndex].balance || !state.unity) return 0;\n      return utils.getBalance(state.wallets[state.currentIndex].balance, state.unity);\n    }\n  },\n  actions: {\n    update_balance: function update_balance(_ref, data) {\n      var commit = _ref.commit,\n          state = _ref.state;\n      axios.get(\"token/\".concat(data.tokenId, \"/address/\").concat(state.wallets[data.index].address)).then(function (response) {\n        if (response.data.result) {\n          commit(\"update_balance\", {\n            index: data.index,\n            balance: response.data.result.balance,\n            transactionCount: response.data.result.transactionCount\n          });\n        }\n      }).catch(function () {\n        // console.log(response);\n        commit(\"update_balance\", {\n          index: data.index,\n          balance: 0,\n          transactionCount: 0\n        });\n      });\n    },\n    update_token: function update_token(_ref2, tokenId) {\n      var commit = _ref2.commit;\n      axios.get(\"token/\".concat(tokenId)).then(function (res) {\n        if (res && res.data && res.data.result) {\n          commit(\"ADD_INFO\", {\n            unity: res.data.result.unity,\n            canSplit: res.data.result.canSplit\n          });\n        }\n      }).catch(function (err) {\n        console.log(\"err: \", err);\n      });\n    },\n    update_vsys: function update_vsys(_ref3, index) {\n      var commit = _ref3.commit,\n          state = _ref3.state;\n      axios.get(\"\".concat(Vue.prototype.$config.vsysEndPoint, \"/addresses/balance/\").concat(state.wallets[state.currentIndex].address)).then(function (res) {\n        if (res.data) {\n          commit(\"update_wallet\", {\n            index: index,\n            vsysBalance: res.data.balance / 100000000\n          });\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    reset_state: function reset_state(context) {\n      context.commit(\"reset_state\");\n    } //    requestTokenInfo:(context)=>{\n    //     context.commit('requestTokenInfo')\n    //   }\n\n  }\n});",null]}