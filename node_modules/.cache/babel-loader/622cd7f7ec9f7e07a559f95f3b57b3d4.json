{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VCalendar/VCalendar.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VCalendar/VCalendar.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\n// import '../../stylus/components/_calendar-daily.styl'\n// Mixins\nimport CalendarWithEvents from './mixins/calendar-with-events'; // Util\n\nimport props from './util/props';\nimport { DAYS_IN_MONTH_MAX, DAY_MIN, DAYS_IN_WEEK, parseTimestamp, validateTimestamp, relativeDays, nextDay, prevDay, copyTimestamp, updateFormatted, updateWeekday, updateRelative, getStartOfMonth, getEndOfMonth } from './util/timestamp'; // Calendars\n\nimport VCalendarMonthly from './VCalendarMonthly';\nimport VCalendarDaily from './VCalendarDaily';\nimport VCalendarWeekly from './VCalendarWeekly';\n/* @vue/component */\n\nexport default CalendarWithEvents.extend({\n  name: 'v-calendar',\n  props: { ...props.calendar,\n    ...props.weeks,\n    ...props.intervals\n  },\n  data: () => ({\n    lastStart: null,\n    lastEnd: null\n  }),\n  computed: {\n    parsedValue() {\n      return validateTimestamp(this.value) ? parseTimestamp(this.value) : this.parsedStart || this.times.today;\n    },\n\n    renderProps() {\n      const around = this.parsedValue;\n      let component = null;\n      let maxDays = this.maxDays;\n      let start = around;\n      let end = around;\n\n      switch (this.type) {\n        case 'month':\n          component = VCalendarMonthly;\n          start = getStartOfMonth(around);\n          end = getEndOfMonth(around);\n          break;\n\n        case 'week':\n          component = VCalendarDaily;\n          start = this.getStartOfWeek(around);\n          end = this.getEndOfWeek(around);\n          maxDays = 7;\n          break;\n\n        case 'day':\n          component = VCalendarDaily;\n          maxDays = 1;\n          break;\n\n        case '4day':\n          component = VCalendarDaily;\n          end = relativeDays(copyTimestamp(end), nextDay, 4);\n          updateFormatted(end);\n          maxDays = 4;\n          break;\n\n        case 'custom-weekly':\n          component = VCalendarWeekly;\n          start = this.parsedStart || around;\n          end = this.parsedEnd;\n          break;\n\n        case 'custom-daily':\n          component = VCalendarDaily;\n          start = this.parsedStart || around;\n          end = this.parsedEnd;\n          break;\n\n        default:\n          throw new Error(this.type + ' is not a valid Calendar type');\n      }\n\n      return {\n        component,\n        start,\n        end,\n        maxDays\n      };\n    }\n\n  },\n  watch: {\n    renderProps: 'checkChange'\n  },\n\n  mounted() {\n    this.updateEventVisibility();\n  },\n\n  updated() {\n    this.updateEventVisibility();\n  },\n\n  methods: {\n    checkChange() {\n      const {\n        start,\n        end\n      } = this.renderProps;\n\n      if (start !== this.lastStart || end !== this.lastEnd) {\n        this.lastStart = start;\n        this.lastEnd = end;\n        this.$emit('change', {\n          start,\n          end\n        });\n      }\n    },\n\n    move(amount = 1) {\n      const moved = copyTimestamp(this.parsedValue);\n      const forward = amount > 0;\n      const mover = forward ? nextDay : prevDay;\n      const limit = forward ? DAYS_IN_MONTH_MAX : DAY_MIN;\n      let times = forward ? amount : -amount;\n\n      while (--times >= 0) {\n        switch (this.type) {\n          case 'month':\n            moved.day = limit;\n            mover(moved);\n            break;\n\n          case 'week':\n            relativeDays(moved, mover, DAYS_IN_WEEK);\n            break;\n\n          case 'day':\n            const index = moved.weekday;\n            const days = forward ? this.weekdaySkips[index] : this.weekdaySkipsReverse[index];\n            relativeDays(moved, mover, days);\n            break;\n\n          case '4day':\n            relativeDays(moved, mover, 4);\n            break;\n        }\n      }\n\n      updateWeekday(moved);\n      updateFormatted(moved);\n      updateRelative(moved, this.times.now);\n      this.$emit('input', moved.date);\n      this.$emit('moved', moved);\n    },\n\n    next(amount = 1) {\n      this.move(amount);\n    },\n\n    prev(amount = 1) {\n      this.move(-amount);\n    },\n\n    timeToY(time, clamp = true) {\n      const c = this.$children[0];\n\n      if (c && c.timeToY) {\n        return c.timeToY(time, clamp);\n      } else {\n        return false;\n      }\n    },\n\n    minutesToPixels(minutes) {\n      const c = this.$children[0];\n\n      if (c && c.minutesToPixels) {\n        return c.minutesToPixels(minutes);\n      } else {\n        return -1;\n      }\n    },\n\n    scrollToTime(time) {\n      const c = this.$children[0];\n\n      if (c && c.scrollToTime) {\n        return c.scrollToTime(time);\n      } else {\n        return false;\n      }\n    }\n\n  },\n\n  render(h) {\n    const {\n      start,\n      end,\n      maxDays,\n      component\n    } = this.renderProps;\n    return h(component, {\n      staticClass: 'v-calendar',\n      class: {\n        'v-calendar-events': !this.noEvents\n      },\n      props: { ...this.$props,\n        start: start.date,\n        end: end.date,\n        maxDays\n      },\n      directives: [{\n        modifiers: {\n          quiet: true\n        },\n        name: 'resize',\n        value: this.updateEventVisibility\n      }],\n      on: { ...this.$listeners,\n        'click:date': day => {\n          if (this.$listeners['input']) {\n            this.$emit('input', day.date);\n          }\n\n          if (this.$listeners['click:date']) {\n            this.$emit('click:date', day);\n          }\n        }\n      },\n      scopedSlots: this.getScopedSlots()\n    });\n  }\n\n});",null]}