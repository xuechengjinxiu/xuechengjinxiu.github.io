{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/mixins/activatable/index.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/mixins/activatable/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n// Mixins\nimport Delayable from \"../delayable\";\nimport Toggleable from \"../toggleable\"; // Utilities\n\nimport mixins from \"../../util/mixins\";\nimport { getSlot, getSlotType } from \"../../util/helpers\";\nimport { consoleError } from \"../../util/console\";\nvar baseMixins = mixins(Delayable, Toggleable);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'activatable',\n  props: {\n    activator: {\n      default: null,\n      validator: function validator(val) {\n        return ['string', 'object'].includes(_typeof(val));\n      }\n    },\n    disabled: Boolean,\n    internalActivator: Boolean,\n    openOnHover: Boolean\n  },\n  data: function data() {\n    return {\n      activatorElement: null,\n      activatorNode: [],\n      events: ['click', 'mouseenter', 'mouseleave'],\n      listeners: {}\n    };\n  },\n  watch: {\n    activator: 'resetActivator',\n    activatorElement: function activatorElement(val) {\n      if (!val) return;\n      this.addActivatorEvents();\n    },\n    openOnHover: 'resetActivator'\n  },\n  mounted: function mounted() {\n    var slotType = getSlotType(this, 'activator', true);\n\n    if (slotType && ['v-slot', 'normal'].includes(slotType)) {\n      consoleError(\"The activator slot must be bound, try '<template v-slot:activator=\\\"{ on }\\\"><v-btn v-on=\\\"on\\\">'\", this);\n    }\n\n    this.getActivator();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeActivatorEvents();\n  },\n  methods: {\n    addActivatorEvents: function addActivatorEvents() {\n      if (!this.activator || this.disabled || !this.activatorElement) return;\n      this.listeners = this.genActivatorListeners();\n      var keys = Object.keys(this.listeners);\n\n      for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n        var key = _keys[_i];\n        this.activatorElement.addEventListener(key, this.listeners[key]);\n      }\n    },\n    genActivator: function genActivator() {\n      var node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {\n        on: this.genActivatorListeners(),\n        attrs: this.genActivatorAttributes()\n      })) || [];\n      this.activatorNode = node;\n      return node;\n    },\n    genActivatorAttributes: function genActivatorAttributes() {\n      return {\n        role: 'button',\n        'aria-haspopup': true,\n        'aria-expanded': String(this.isActive)\n      };\n    },\n    genActivatorListeners: function genActivatorListeners() {\n      var _this = this;\n\n      if (this.disabled) return {};\n      var listeners = {};\n\n      if (this.openOnHover) {\n        listeners.mouseenter = function (e) {\n          _this.getActivator(e);\n\n          _this.runDelay('open');\n        };\n\n        listeners.mouseleave = function (e) {\n          _this.getActivator(e);\n\n          _this.runDelay('close');\n        };\n      } else {\n        listeners.click = function (e) {\n          if (_this.activatorElement) _this.activatorElement.focus();\n          _this.isActive = !_this.isActive;\n        };\n      }\n\n      return listeners;\n    },\n    getActivator: function getActivator(e) {\n      // If we've already fetched the activator, re-use\n      if (this.activatorElement) return this.activatorElement;\n      var activator = null;\n\n      if (this.activator) {\n        var target = this.internalActivator ? this.$el : document; // Selector\n\n        if (typeof this.activator === 'string') {\n          activator = target.querySelector(this.activator); // VNode\n        } else if (this.activator.$el) {\n          activator = this.activator.$el; // HTMLElement | Element\n        } else {\n          activator = this.activator;\n        }\n      } else if (e) {\n        activator = e.currentTarget || e.target;\n      } else if (this.activatorNode.length) {\n        activator = this.activatorNode[0].elm;\n      }\n\n      this.activatorElement = activator;\n      return this.activatorElement;\n    },\n    getContentSlot: function getContentSlot() {\n      return getSlot(this, 'default', this.getValueProxy(), true);\n    },\n    getValueProxy: function getValueProxy() {\n      var self = this;\n      return {\n        get value() {\n          return self.isActive;\n        },\n\n        set value(isActive) {\n          self.isActive = isActive;\n        }\n\n      };\n    },\n    removeActivatorEvents: function removeActivatorEvents() {\n      if (!this.activator || !this.activatorElement) return;\n      var keys = Object.keys(this.listeners);\n\n      for (var _i2 = 0, _keys2 = keys; _i2 < _keys2.length; _i2++) {\n        var key = _keys2[_i2];\n        this.activatorElement.removeEventListener(key, this.listeners[key]);\n      }\n\n      this.listeners = {};\n    },\n    resetActivator: function resetActivator() {\n      this.activatorElement = null;\n      this.getActivator();\n    }\n  }\n});",null]}