{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js??ref--13-0!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/convert.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/convert.js","mtime":1585119550000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\n// Derived from waves-api\n//\nimport BigNumber from \"bignumber.js\";\nimport Converters from \"./converters\";\n\nfunction performBitwiseAnd(a, b) {\n  var sa = a.toString(2).split(\".\")[0];\n  var sb = b.toString(2).split(\".\")[0];\n  var len = Math.min(sa.length, sb.length);\n  var s1 = sa.slice(sa.length - len);\n  var s2 = sb.slice(sb.length - len);\n  var result = new Array(len);\n\n  for (var i = len - 1; i >= 0; i--) {\n    result[i] = s1[i] === \"1\" && s2[i] === \"1\" ? \"1\" : \"0\";\n  }\n\n  return parseInt(result.join(\"\"), 2);\n}\n\nvar Convert = {\n  booleanToBytes: function booleanToBytes(input) {\n    if (typeof input !== \"boolean\") {\n      throw new Error(\"Boolean input is expected\");\n    }\n\n    return input ? [1] : [0];\n  },\n  bytesToByteArrayWithSize: function bytesToByteArrayWithSize(input) {\n    if (!(input instanceof Array || input instanceof Uint8Array)) {\n      throw new Error(\"Byte array or Uint8Array input is expected\");\n    } else if (input instanceof Array && !input.every(function (n) {\n      return typeof n === \"number\";\n    })) {\n      throw new Error(\"Byte array contains non-numeric elements\");\n    }\n\n    if (!(input instanceof Array)) {\n      input = Array.prototype.slice.call(input);\n    }\n\n    var lengthBytes = Converters.int16ToBytes(input.length, true);\n    return lengthBytes.concat(input);\n  },\n  shortToByteArray: function shortToByteArray(input) {\n    if (typeof input !== \"number\") {\n      throw new Error(\"Numeric input is expected\");\n    }\n\n    return Converters.int16ToBytes(input, true);\n  },\n  longToByteArray: function longToByteArray(input) {\n    if (typeof input !== \"number\") {\n      throw new Error(\"Numeric input is expected\");\n    }\n\n    var bytes = new Array(7);\n\n    for (var k = 7; k >= 0; k--) {\n      bytes[k] = input & 255;\n      input = input / 256;\n    }\n\n    return bytes;\n  },\n  idxToByteArray: function idxToByteArray(input) {\n    return Converters.int32ToBytes(input, true);\n  },\n  bigNumberToByteArray: function bigNumberToByteArray(input) {\n    if (!(input instanceof BigNumber)) {\n      throw new Error(\"BigNumber input is expected\");\n    }\n\n    var performBitwiseAnd255 = performBitwiseAnd.bind(null, new BigNumber(255));\n    var bytes = new Array(7);\n\n    for (var k = 7; k >= 0; k--) {\n      bytes[k] = performBitwiseAnd255(input);\n      input = input.div(256);\n    }\n\n    return bytes;\n  },\n  stringToByteArray: function stringToByteArray(input) {\n    if (typeof input !== \"string\") {\n      throw new Error(\"String input is expected\");\n    }\n\n    return Converters.stringToByteArray(input);\n  },\n  stringToByteArrayWithSize: function stringToByteArrayWithSize(input) {\n    if (typeof input !== \"string\") {\n      throw new Error(\"String input is expected\");\n    }\n\n    var stringBytes = Converters.stringToByteArray(input);\n    var lengthBytes = Converters.int16ToBytes(stringBytes.length, true);\n    return lengthBytes.concat(stringBytes);\n  }\n};\nexport default Convert;",null]}