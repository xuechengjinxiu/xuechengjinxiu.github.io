{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VDialog/VDialog.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VDialog/VDialog.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport \"../../../src/components/VDialog/VDialog.sass\"; // Mixins\n\nimport Activatable from \"../../mixins/activatable\";\nimport Dependent from \"../../mixins/dependent\";\nimport Detachable from \"../../mixins/detachable\";\nimport Overlayable from \"../../mixins/overlayable\";\nimport Returnable from \"../../mixins/returnable\";\nimport Stackable from \"../../mixins/stackable\";\nimport Toggleable from \"../../mixins/toggleable\"; // Directives\n\nimport ClickOutside from \"../../directives/click-outside\"; // Helpers\n\nimport { convertToUnit, keyCodes } from \"../../util/helpers\";\nimport ThemeProvider from \"../../util/ThemeProvider\";\nimport mixins from \"../../util/mixins\";\nimport { removed } from \"../../util/console\";\nvar baseMixins = mixins(Activatable, Dependent, Detachable, Overlayable, Returnable, Stackable, Toggleable);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'v-dialog',\n  directives: {\n    ClickOutside: ClickOutside\n  },\n  props: {\n    dark: Boolean,\n    disabled: Boolean,\n    fullscreen: Boolean,\n    light: Boolean,\n    maxWidth: {\n      type: [String, Number],\n      default: 'none'\n    },\n    noClickAnimation: Boolean,\n    origin: {\n      type: String,\n      default: 'center center'\n    },\n    persistent: Boolean,\n    retainFocus: {\n      type: Boolean,\n      default: true\n    },\n    scrollable: Boolean,\n    transition: {\n      type: [String, Boolean],\n      default: 'dialog-transition'\n    },\n    width: {\n      type: [String, Number],\n      default: 'auto'\n    }\n  },\n  data: function data() {\n    return {\n      activatedBy: null,\n      animate: false,\n      animateTimeout: -1,\n      isActive: !!this.value,\n      stackMinZIndex: 200\n    };\n  },\n  computed: {\n    classes: function classes() {\n      var _ref;\n\n      return _ref = {}, _defineProperty(_ref, \"v-dialog \".concat(this.contentClass).trim(), true), _defineProperty(_ref, 'v-dialog--active', this.isActive), _defineProperty(_ref, 'v-dialog--persistent', this.persistent), _defineProperty(_ref, 'v-dialog--fullscreen', this.fullscreen), _defineProperty(_ref, 'v-dialog--scrollable', this.scrollable), _defineProperty(_ref, 'v-dialog--animated', this.animate), _ref;\n    },\n    contentClasses: function contentClasses() {\n      return {\n        'v-dialog__content': true,\n        'v-dialog__content--active': this.isActive\n      };\n    },\n    hasActivator: function hasActivator() {\n      return Boolean(!!this.$slots.activator || !!this.$scopedSlots.activator);\n    }\n  },\n  watch: {\n    isActive: function isActive(val) {\n      if (val) {\n        this.show();\n        this.hideScroll();\n      } else {\n        this.removeOverlay();\n        this.unbind();\n      }\n    },\n    fullscreen: function fullscreen(val) {\n      if (!this.isActive) return;\n\n      if (val) {\n        this.hideScroll();\n        this.removeOverlay(false);\n      } else {\n        this.showScroll();\n        this.genOverlay();\n      }\n    }\n  },\n  created: function created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('full-width')) {\n      removed('full-width', this);\n    }\n  },\n  beforeMount: function beforeMount() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      _this.isBooted = _this.isActive;\n      _this.isActive && _this.show();\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') this.unbind();\n  },\n  methods: {\n    animateClick: function animateClick() {\n      var _this2 = this;\n\n      this.animate = false; // Needed for when clicking very fast\n      // outside of the dialog\n\n      this.$nextTick(function () {\n        _this2.animate = true;\n        window.clearTimeout(_this2.animateTimeout);\n        _this2.animateTimeout = window.setTimeout(function () {\n          return _this2.animate = false;\n        }, 150);\n      });\n    },\n    closeConditional: function closeConditional(e) {\n      var target = e.target; // If the dialog content contains\n      // the click event, or if the\n      // dialog is not active, or if the overlay\n      // is the same element as the target\n\n      if (this._isDestroyed || !this.isActive || this.$refs.content.contains(target) || this.overlay && target && !this.overlay.$el.contains(target)) return false; // If we made it here, the click is outside\n      // and is active. If persistent, and the\n      // click is on the overlay, animate\n\n      this.$emit('click:outside');\n\n      if (this.persistent && this.overlay) {\n        if (!this.noClickAnimation && (this.overlay.$el === target || this.overlay.$el.contains(target))) this.animateClick();\n        return false;\n      } // close dialog if !persistent, clicked outside and we're the topmost dialog.\n      // Since this should only be called in a capture event (bottom up), we shouldn't need to stop propagation\n\n\n      return this.activeZIndex >= this.getMaxZIndex();\n    },\n    hideScroll: function hideScroll() {\n      if (this.fullscreen) {\n        document.documentElement.classList.add('overflow-y-hidden');\n      } else {\n        Overlayable.options.methods.hideScroll.call(this);\n      }\n    },\n    show: function show() {\n      var _this3 = this;\n\n      !this.fullscreen && !this.hideOverlay && this.genOverlay();\n      this.$nextTick(function () {\n        _this3.$refs.content.focus();\n\n        _this3.bind();\n      });\n    },\n    bind: function bind() {\n      window.addEventListener('focusin', this.onFocusin);\n    },\n    unbind: function unbind() {\n      window.removeEventListener('focusin', this.onFocusin);\n    },\n    onKeydown: function onKeydown(e) {\n      if (e.keyCode === keyCodes.esc && !this.getOpenDependents().length) {\n        if (!this.persistent) {\n          this.isActive = false;\n          var activator = this.getActivator();\n          this.$nextTick(function () {\n            return activator && activator.focus();\n          });\n        } else if (!this.noClickAnimation) {\n          this.animateClick();\n        }\n      }\n\n      this.$emit('keydown', e);\n    },\n    onFocusin: function onFocusin(e) {\n      if (!e || e.target === document.activeElement || !this.retainFocus) return;\n      var target = e.target;\n\n      if (!!target && // It isn't the document or the dialog body\n      ![document, this.$refs.content].includes(target) && // It isn't inside the dialog body\n      !this.$refs.content.contains(target) && // We're the topmost dialog\n      this.activeZIndex >= this.getMaxZIndex() && // It isn't inside a dependent element (like a menu)\n      !this.getOpenDependentElements().some(function (el) {\n        return el.contains(target);\n      }) // So we must have focused something outside the dialog and its children\n      ) {\n        // Find and focus the first available element inside the dialog\n        var focusable = this.$refs.content.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n        focusable.length && focusable[0].focus();\n      }\n    }\n  },\n  render: function render(h) {\n    var _this4 = this;\n\n    var children = [];\n    var data = {\n      class: this.classes,\n      ref: 'dialog',\n      directives: [{\n        name: 'click-outside',\n        value: function value() {\n          _this4.isActive = false;\n        },\n        args: {\n          closeConditional: this.closeConditional,\n          include: this.getOpenDependentElements\n        }\n      }, {\n        name: 'show',\n        value: this.isActive\n      }],\n      on: {\n        click: function click(e) {\n          e.stopPropagation();\n        }\n      },\n      style: {}\n    };\n\n    if (!this.fullscreen) {\n      data.style = {\n        maxWidth: this.maxWidth === 'none' ? undefined : convertToUnit(this.maxWidth),\n        width: this.width === 'auto' ? undefined : convertToUnit(this.width)\n      };\n    }\n\n    children.push(this.genActivator());\n    var dialog = h('div', data, this.showLazyContent(this.getContentSlot()));\n\n    if (this.transition) {\n      dialog = h('transition', {\n        props: {\n          name: this.transition,\n          origin: this.origin\n        }\n      }, [dialog]);\n    }\n\n    children.push(h('div', {\n      class: this.contentClasses,\n      attrs: _objectSpread({\n        role: 'document',\n        tabindex: this.isActive ? 0 : undefined\n      }, this.getScopeIdAttrs()),\n      on: {\n        keydown: this.onKeydown\n      },\n      style: {\n        zIndex: this.activeZIndex\n      },\n      ref: 'content'\n    }, [this.$createElement(ThemeProvider, {\n      props: {\n        root: true,\n        light: this.light,\n        dark: this.dark\n      }\n    }, [dialog])]));\n    return h('div', {\n      staticClass: 'v-dialog__container',\n      attrs: {\n        role: 'dialog'\n      }\n    }, children);\n  }\n});",null]}