{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VTabs/VTab.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VTabs/VTab.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable';\nimport Routable from '../../mixins/routable';\nimport Themeable from '../../mixins/themeable'; // Utilities\n\nimport { keyCodes } from './../../util/helpers';\nimport mixins from '../../util/mixins';\nconst baseMixins = mixins(Routable, // Must be after routable\n// to overwrite activeClass\nGroupableFactory('tabsBar'), Themeable);\nexport default baseMixins.extend().extend().extend({\n  name: 'v-tab',\n  props: {\n    ripple: {\n      type: [Boolean, Object],\n      default: true\n    }\n  },\n  data: () => ({\n    proxyClass: 'v-tab--active'\n  }),\n  computed: {\n    classes() {\n      return {\n        'v-tab': true,\n        ...Routable.options.computed.classes.call(this),\n        'v-tab--disabled': this.disabled,\n        ...this.groupClasses\n      };\n    },\n\n    value() {\n      let to = this.to || this.href || '';\n\n      if (this.$router && this.to === Object(this.to)) {\n        const resolve = this.$router.resolve(this.to, this.$route, this.append);\n        to = resolve.href;\n      }\n\n      return to.replace('#', '');\n    }\n\n  },\n\n  mounted() {\n    this.onRouteChange();\n  },\n\n  methods: {\n    click(e) {\n      // If user provides an\n      // actual link, do not\n      // prevent default\n      if (this.href && this.href.indexOf('#') > -1) e.preventDefault();\n      if (e.detail) this.$el.blur();\n      this.$emit('click', e);\n      this.to || this.toggle();\n    }\n\n  },\n\n  render(h) {\n    const {\n      tag,\n      data\n    } = this.generateRouteLink();\n    data.attrs = { ...data.attrs,\n      'aria-selected': String(this.isActive),\n      role: 'tab',\n      tabindex: 0\n    };\n    data.on = { ...data.on,\n      keydown: e => {\n        if (e.keyCode === keyCodes.enter) this.click(e);\n        this.$emit('keydown', e);\n      }\n    };\n    return h(tag, data, this.$slots.default);\n  }\n\n});",null]}