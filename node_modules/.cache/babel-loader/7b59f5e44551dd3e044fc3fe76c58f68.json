{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js??ref--13-0!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/seed.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/seed.js","mtime":1585119550000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.freeze\";\nimport _classCallCheck from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport \"core-js/modules/es6.typed.uint32-array\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport CryptoJS from \"crypto-js\";\nimport base58 from \"base-58\";\nimport words from \"./word-list\";\nimport crypto from \"./crypto\";\nimport secure_random from \"./secure-random\";\nimport converters from \"./converters\"; // start generateNewSeed\n\nfunction generateNewSeed(length) {\n  var wordCount = words.length;\n  var random = generateRandomUint32Array(length);\n  var phrase = [];\n\n  for (var i = 0; i < length; i++) {\n    var wordIndex = random[i] % wordCount;\n    phrase.push(words[wordIndex]);\n  }\n\n  random.set(new Uint8Array(random.length));\n  return phrase.join(\" \");\n}\n\nfunction generateRandomUint32Array(length) {\n  var a = secure_random.randomUint8Array(length);\n  var b = secure_random.randomUint8Array(length);\n  var result = new Uint32Array(length);\n\n  for (var i = 0; i < length; i++) {\n    var hash = converters.byteArrayToHexString(sha256(\"\" + a[i] + b[i]));\n    var randomValue = parseInt(hash.slice(0, 13), 16);\n    result.set([randomValue], i);\n  }\n\n  return result;\n}\n\nfunction sha256(input) {\n  var bytes;\n\n  if (typeof input === \"string\") {\n    bytes = converters.stringToByteArray(input);\n  } else {\n    bytes = input;\n  }\n\n  var wordArray = converters.byteArrayToWordArrayEx(Uint8Array.from(bytes));\n  var resultWordArray = CryptoJS.SHA256(wordArray);\n  return converters.wordArrayToByteArrayEx(resultWordArray);\n} // encryptSeedPhrase\n\n\nfunction encryptSeedPhrase(seedPhrase, password, encryptionRounds) {\n  if (encryptionRounds === void 0) {\n    encryptionRounds = 5000;\n  }\n\n  if (encryptionRounds < 1000) {\n    console.warn(\"Encryption rounds may be too few\");\n  }\n\n  return crypto.encryptSeed(seedPhrase, password, encryptionRounds);\n} // decryptSeedPhrase\n\n\nfunction decryptSeedPhrase(encryptedSeedPhrase, password, encryptionRounds) {\n  if (encryptionRounds === void 0) {\n    encryptionRounds = 5000;\n  }\n\n  try {\n    var phrase = crypto.decryptSeed(encryptedSeedPhrase, password, encryptionRounds);\n    return phrase;\n  } catch (e) {\n    throw new Error(\"The password is wrong\");\n  }\n}\n\nexport default {\n  generateNewSeed: generateNewSeed,\n  encryptSeedPhrase: encryptSeedPhrase,\n  decryptSeedPhrase: decryptSeedPhrase\n};\nexport var Seed = function Seed(phrase, nonce, networkByte) {\n  _classCallCheck(this, Seed);\n\n  this.phrase = phrase;\n  this.nonce = nonce || 0; //WALLET NUMBER\n\n  var keys = crypto.buildKeyPair(phrase, this.nonce); //Produce publickey and privatekey\n\n  this.address = crypto.buildRawAddress(keys.publicKey, networkByte);\n  this.keyPair = {\n    privateKey: base58.encode(keys.privateKey),\n    publicKey: base58.encode(keys.publicKey)\n  };\n  Object.freeze(this);\n  Object.freeze(this.keyPair);\n};",{"version":3,"sources":["/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/src/libs1/seed.js"],"names":["CryptoJS","base58","words","crypto","secure_random","converters","generateNewSeed","length","wordCount","random","generateRandomUint32Array","phrase","i","wordIndex","push","set","Uint8Array","join","a","randomUint8Array","b","result","Uint32Array","hash","byteArrayToHexString","sha256","randomValue","parseInt","slice","input","bytes","stringToByteArray","wordArray","byteArrayToWordArrayEx","from","resultWordArray","SHA256","wordArrayToByteArrayEx","encryptSeedPhrase","seedPhrase","password","encryptionRounds","console","warn","encryptSeed","decryptSeedPhrase","encryptedSeedPhrase","decryptSeed","e","Error","Seed","nonce","networkByte","keys","buildKeyPair","address","buildRawAddress","publicKey","keyPair","privateKey","encode","Object","freeze"],"mappings":"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","sourcesContent":["import CryptoJS from \"crypto-js\";\nimport base58 from \"base-58\";\nimport words from \"./word-list\";\nimport crypto from \"./crypto\";\nimport secure_random from \"./secure-random\";\nimport converters from \"./converters\";\n\n// start generateNewSeed\nfunction generateNewSeed(length) {\n  const wordCount = words.length;\n  let random = generateRandomUint32Array(length);\n  let phrase = [];\n  for (let i = 0; i < length; i++) {\n    let wordIndex = random[i] % wordCount;\n    phrase.push(words[wordIndex]);\n  }\n  random.set(new Uint8Array(random.length));\n  return phrase.join(\" \");\n}\n\nfunction generateRandomUint32Array(length) {\n\tlet a = secure_random.randomUint8Array(length);\n\tlet b = secure_random.randomUint8Array(length);\n\tlet result = new Uint32Array(length);\n\tfor (let i = 0; i < length; i++) {\n\t\tlet hash = converters.byteArrayToHexString(sha256(\"\" + a[i] + b[i]));\n\t\tlet randomValue = parseInt(hash.slice(0, 13), 16);\n\t\tresult.set([randomValue], i);\n\t}\n\treturn result;\n}\n\t\nfunction sha256(input) {\n  let bytes;\n  if (typeof input === \"string\") {\n    bytes = converters.stringToByteArray(input);\n  } else {\n    bytes = input;\n  }\n  let wordArray = converters.byteArrayToWordArrayEx(Uint8Array.from(bytes));\n  let resultWordArray = CryptoJS.SHA256(wordArray);\n  return converters.wordArrayToByteArrayEx(resultWordArray);\n}\n\n// encryptSeedPhrase\nfunction encryptSeedPhrase(seedPhrase, password, encryptionRounds) {\n  if (encryptionRounds === void 0) {\n    encryptionRounds = 5000;\n  }\n  if (encryptionRounds < 1000) {\n    console.warn(\"Encryption rounds may be too few\");\n  }\n  return crypto.encryptSeed(seedPhrase, password, encryptionRounds);\n}\n\n// decryptSeedPhrase\nfunction decryptSeedPhrase(encryptedSeedPhrase, password, encryptionRounds) {\n  if (encryptionRounds === void 0) {\n    encryptionRounds = 5000;\n  }\n  try {\n    const phrase = crypto.decryptSeed(\n      encryptedSeedPhrase,\n      password,\n      encryptionRounds\n    );\n    return phrase;\n  } catch (e) {\n    throw new Error(\"The password is wrong\");\n  }\n}\n\nexport default {\n\tgenerateNewSeed,\n\tencryptSeedPhrase,\n\tdecryptSeedPhrase\n}\n\nexport class Seed {\n  constructor(phrase, nonce, networkByte) {\n    this.phrase = phrase;\n    this.nonce = nonce || 0;//WALLET NUMBER\n    const keys = crypto.buildKeyPair(phrase, this.nonce);//Produce publickey and privatekey\n    this.address = crypto.buildRawAddress(keys.publicKey, networkByte);\n    this.keyPair = {\n      privateKey: base58.encode(keys.privateKey),\n      publicKey: base58.encode(keys.publicKey)\n    };\n    Object.freeze(this);\n    Object.freeze(this.keyPair);\n  }\n}"]}]}