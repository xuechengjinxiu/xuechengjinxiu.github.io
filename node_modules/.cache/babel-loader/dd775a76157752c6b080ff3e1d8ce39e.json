{"remainingRequest":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VTreeview/VTreeviewNode.js","dependencies":[{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/vuetify/lib/components/VTreeview/VTreeviewNode.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/jin/Desktop/v-cloud-feature-common-component/token-service/wallet/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Components\nimport { VExpandTransition } from \"../transitions\";\nimport { VIcon } from \"../VIcon\";\nimport VTreeviewNode from \"./VTreeviewNode\"; // Mixins\n\nimport { inject as RegistrableInject } from \"../../mixins/registrable\";\nimport Colorable from \"../../mixins/colorable\"; // Utils\n\nimport mixins from \"../../util/mixins\";\nimport { getObjectValueByPath } from \"../../util/helpers\";\nvar baseMixins = mixins(Colorable, RegistrableInject('treeview'));\nexport var VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active'\n  },\n  color: {\n    type: String,\n    default: 'primary'\n  },\n  expandIcon: {\n    type: String,\n    default: '$vuetify.icons.subgroup'\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxIndeterminate'\n  },\n  itemChildren: {\n    type: String,\n    default: 'children'\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled'\n  },\n  itemKey: {\n    type: String,\n    default: 'id'\n  },\n  itemText: {\n    type: String,\n    default: 'name'\n  },\n  loadChildren: Function,\n  loadingIcon: {\n    type: String,\n    default: '$vuetify.icons.loading'\n  },\n  offIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxOff'\n  },\n  onIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxOn'\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent'\n  },\n  shaped: Boolean,\n  transition: Boolean\n};\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-treeview-node',\n  inject: {\n    treeview: {\n      default: null\n    }\n  },\n  props: _objectSpread({\n    item: {\n      type: Object,\n      default: function _default() {\n        return null;\n      }\n    }\n  }, VTreeviewNodeProps),\n  data: function data() {\n    return {\n      hasLoaded: false,\n      isActive: false,\n      isIndeterminate: false,\n      isLoading: false,\n      isOpen: false,\n      isSelected: false\n    };\n  },\n  computed: {\n    disabled: function disabled() {\n      return getObjectValueByPath(this.item, this.itemDisabled);\n    },\n    key: function key() {\n      return getObjectValueByPath(this.item, this.itemKey);\n    },\n    children: function children() {\n      return getObjectValueByPath(this.item, this.itemChildren);\n    },\n    text: function text() {\n      return getObjectValueByPath(this.item, this.itemText);\n    },\n    scopedProps: function scopedProps() {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen\n      };\n    },\n    computedIcon: function computedIcon() {\n      if (this.isIndeterminate) return this.indeterminateIcon;else if (this.isSelected) return this.onIcon;else return this.offIcon;\n    },\n    hasChildren: function hasChildren() {\n      return !!this.children && (!!this.children.length || !!this.loadChildren);\n    }\n  },\n  created: function created() {\n    this.treeview.register(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.treeview.unregister(this);\n  },\n  methods: {\n    checkChildren: function checkChildren() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!_this.children || _this.children.length || !_this.loadChildren || _this.hasLoaded) return resolve();\n        _this.isLoading = true;\n        resolve(_this.loadChildren(_this.item));\n      }).then(function () {\n        _this.isLoading = false;\n        _this.hasLoaded = true;\n      });\n    },\n    open: function open() {\n      this.isOpen = !this.isOpen;\n      this.treeview.updateOpen(this.key, this.isOpen);\n      this.treeview.emitOpen();\n    },\n    genLabel: function genLabel() {\n      var children = [];\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps));else children.push(this.text);\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label'\n      }, children);\n    },\n    genContent: function genContent() {\n      var children = [this.$scopedSlots.prepend && this.$scopedSlots.prepend(this.scopedProps), this.genLabel(), this.$scopedSlots.append && this.$scopedSlots.append(this.scopedProps)];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content'\n      }, children);\n    },\n    genToggle: function genToggle() {\n      var _this2 = this;\n\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading\n        },\n        slot: 'prepend',\n        on: {\n          click: function click(e) {\n            if (_this2.disabled) return;\n            e.stopPropagation();\n            if (_this2.isLoading) return;\n\n            _this2.checkChildren().then(function () {\n              return _this2.open();\n            });\n          }\n        }\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon]);\n    },\n    genCheckbox: function genCheckbox() {\n      var _this3 = this;\n\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected ? this.selectedColor : undefined\n        },\n        on: {\n          click: function click(e) {\n            if (_this3.disabled) return;\n            e.stopPropagation();\n            if (_this3.isLoading) return;\n\n            _this3.checkChildren().then(function () {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              _this3.$nextTick(function () {\n                _this3.isSelected = !_this3.isSelected;\n                _this3.isIndeterminate = false;\n\n                _this3.treeview.updateSelected(_this3.key, _this3.isSelected);\n\n                _this3.treeview.emitSelected();\n              });\n            });\n          }\n        }\n      }, [this.computedIcon]);\n    },\n    genNode: function genNode() {\n      var _this4 = this;\n\n      var children = [this.genContent()];\n      if (this.selectable) children.unshift(this.genCheckbox());\n      if (this.hasChildren) children.unshift(this.genToggle());\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: _defineProperty({}, this.activeClass, this.isActive),\n        on: {\n          click: function click() {\n            if (_this4.disabled) return;\n\n            if (_this4.openOnClick && _this4.children) {\n              _this4.open();\n            } else if (_this4.activatable) {\n              _this4.isActive = !_this4.isActive;\n\n              _this4.treeview.updateActive(_this4.key, _this4.isActive);\n\n              _this4.treeview.emitActive();\n            }\n          }\n        }\n      }), children);\n    },\n    genChild: function genChild(item) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item: item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped\n        },\n        scopedSlots: this.$scopedSlots\n      });\n    },\n    genChildrenWrapper: function genChildrenWrapper() {\n      if (!this.isOpen || !this.children) return null;\n      var children = [this.children.map(this.genChild)];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children'\n      }, children);\n    },\n    genTransition: function genTransition() {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()]);\n    }\n  },\n  render: function render(h) {\n    var children = [this.genNode()];\n    if (this.transition) children.push(this.genTransition());else children.push(this.genChildrenWrapper());\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n        'v-treeview-node--excluded': this.treeview.isExcluded(this.key)\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen)\n      }\n    }, children);\n  }\n});",null]}